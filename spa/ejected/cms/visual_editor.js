/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from '../../web_modules/svelte/internal/index.mjs';

import DynamicFormInput from './dynamic_form_input.js';
import ButtonWrapper from './button_wrapper.js';
import Button from './button.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[8] = list[i][0];
	child_ctx[9] = list[i][1];
	child_ctx[10] = list;
	child_ctx[11] = i;
	return child_ctx;
}

// (9:4) {#each Object.entries(content.fields) as [label, field]}
function create_each_block(ctx) {
	let div;
	let label;
	let t0_value = /*label*/ ctx[8] + "";
	let t0;
	let label_for_value;
	let t1;
	let dynamicforminput;
	let updating_field;
	let updating_showMedia;
	let updating_changingAsset;
	let updating_localMediaList;
	let current;

	function dynamicforminput_field_binding(value) {
		/*dynamicforminput_field_binding*/ ctx[4](value, /*label*/ ctx[8]);
	}

	function dynamicforminput_showMedia_binding(value) {
		/*dynamicforminput_showMedia_binding*/ ctx[5](value);
	}

	function dynamicforminput_changingAsset_binding(value) {
		/*dynamicforminput_changingAsset_binding*/ ctx[6](value);
	}

	function dynamicforminput_localMediaList_binding(value) {
		/*dynamicforminput_localMediaList_binding*/ ctx[7](value);
	}

	let dynamicforminput_props = { label: /*label*/ ctx[8] };

	if (/*content*/ ctx[0].fields[/*label*/ ctx[8]] !== void 0) {
		dynamicforminput_props.field = /*content*/ ctx[0].fields[/*label*/ ctx[8]];
	}

	if (/*showMedia*/ ctx[1] !== void 0) {
		dynamicforminput_props.showMedia = /*showMedia*/ ctx[1];
	}

	if (/*changingAsset*/ ctx[2] !== void 0) {
		dynamicforminput_props.changingAsset = /*changingAsset*/ ctx[2];
	}

	if (/*localMediaList*/ ctx[3] !== void 0) {
		dynamicforminput_props.localMediaList = /*localMediaList*/ ctx[3];
	}

	dynamicforminput = new DynamicFormInput({ props: dynamicforminput_props });
	binding_callbacks.push(() => bind(dynamicforminput, "field", dynamicforminput_field_binding));
	binding_callbacks.push(() => bind(dynamicforminput, "showMedia", dynamicforminput_showMedia_binding));
	binding_callbacks.push(() => bind(dynamicforminput, "changingAsset", dynamicforminput_changingAsset_binding));
	binding_callbacks.push(() => bind(dynamicforminput, "localMediaList", dynamicforminput_localMediaList_binding));

	return {
		c() {
			div = element("div");
			label = element("label");
			t0 = text(t0_value);
			t1 = space();
			create_component(dynamicforminput.$$.fragment);
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			label = claim_element(div_nodes, "LABEL", { for: true, class: true });
			var label_nodes = children(label);
			t0 = claim_text(label_nodes, t0_value);
			label_nodes.forEach(detach);
			t1 = claim_space(div_nodes);
			claim_component(dynamicforminput.$$.fragment, div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(label, "for", label_for_value = /*label*/ ctx[8]);
			attr(label, "class", "svelte-15qb3w8");
			attr(div, "class", "field svelte-15qb3w8");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, label);
			append(label, t0);
			append(div, t1);
			mount_component(dynamicforminput, div, null);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*content*/ 1) && t0_value !== (t0_value = /*label*/ ctx[8] + "")) set_data(t0, t0_value);

			if (!current || dirty & /*content*/ 1 && label_for_value !== (label_for_value = /*label*/ ctx[8])) {
				attr(label, "for", label_for_value);
			}

			const dynamicforminput_changes = {};
			if (dirty & /*content*/ 1) dynamicforminput_changes.label = /*label*/ ctx[8];

			if (!updating_field && dirty & /*content, Object*/ 1) {
				updating_field = true;
				dynamicforminput_changes.field = /*content*/ ctx[0].fields[/*label*/ ctx[8]];
				add_flush_callback(() => updating_field = false);
			}

			if (!updating_showMedia && dirty & /*showMedia*/ 2) {
				updating_showMedia = true;
				dynamicforminput_changes.showMedia = /*showMedia*/ ctx[1];
				add_flush_callback(() => updating_showMedia = false);
			}

			if (!updating_changingAsset && dirty & /*changingAsset*/ 4) {
				updating_changingAsset = true;
				dynamicforminput_changes.changingAsset = /*changingAsset*/ ctx[2];
				add_flush_callback(() => updating_changingAsset = false);
			}

			if (!updating_localMediaList && dirty & /*localMediaList*/ 8) {
				updating_localMediaList = true;
				dynamicforminput_changes.localMediaList = /*localMediaList*/ ctx[3];
				add_flush_callback(() => updating_localMediaList = false);
			}

			dynamicforminput.$set(dynamicforminput_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dynamicforminput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dynamicforminput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(dynamicforminput);
		}
	};
}

// (15:4) <ButtonWrapper>
function create_default_slot(ctx) {
	let button0;
	let t;
	let button1;
	let current;

	button0 = new Button({
			props: {
				commitList: [
					{
						file: /*content*/ ctx[0].filepath,
						contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
					}
				],
				buttonText: "Save",
				action: /*content*/ ctx[0].isNew ? "create" : "update",
				encoding: "text"
			}
		});

	button1 = new Button({
			props: {
				commitList: [
					{
						file: /*content*/ ctx[0].filepath,
						contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
					}
				],
				buttonText: "Delete",
				action: "delete",
				encoding: "text"
			}
		});

	return {
		c() {
			create_component(button0.$$.fragment);
			t = space();
			create_component(button1.$$.fragment);
		},
		l(nodes) {
			claim_component(button0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(button1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(button0, target, anchor);
			insert(target, t, anchor);
			mount_component(button1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*content*/ 1) button0_changes.commitList = [
				{
					file: /*content*/ ctx[0].filepath,
					contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
				}
			];

			if (dirty & /*content*/ 1) button0_changes.action = /*content*/ ctx[0].isNew ? "create" : "update";
			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*content*/ 1) button1_changes.commitList = [
				{
					file: /*content*/ ctx[0].filepath,
					contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
				}
			];

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button0, detaching);
			if (detaching) detach(t);
			destroy_component(button1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let form;
	let t;
	let buttonwrapper;
	let current;
	let each_value = Object.entries(/*content*/ ctx[0].fields);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	buttonwrapper = new ButtonWrapper({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			form = element("form");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t = space();
			create_component(buttonwrapper.$$.fragment);
			this.h();
		},
		l(nodes) {
			form = claim_element(nodes, "FORM", { class: true });
			var form_nodes = children(form);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(form_nodes);
			}

			t = claim_space(form_nodes);
			claim_component(buttonwrapper.$$.fragment, form_nodes);
			form_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(form, "class", "svelte-15qb3w8");
		},
		m(target, anchor) {
			insert(target, form, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(form, null);
			}

			append(form, t);
			mount_component(buttonwrapper, form, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*Object, content, showMedia, changingAsset, localMediaList*/ 15) {
				each_value = Object.entries(/*content*/ ctx[0].fields);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(form, t);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}

			const buttonwrapper_changes = {};

			if (dirty & /*$$scope, content*/ 4097) {
				buttonwrapper_changes.$$scope = { dirty, ctx };
			}

			buttonwrapper.$set(buttonwrapper_changes);
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			transition_in(buttonwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			transition_out(buttonwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form);
			destroy_each(each_blocks, detaching);
			destroy_component(buttonwrapper);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { content } = $$props,
		{ showMedia } = $$props,
		{ changingAsset } = $$props,
		{ localMediaList } = $$props;

	function dynamicforminput_field_binding(value, label) {
		if ($$self.$$.not_equal(content.fields[label], value)) {
			content.fields[label] = value;
			$$invalidate(0, content);
		}
	}

	function dynamicforminput_showMedia_binding(value) {
		showMedia = value;
		$$invalidate(1, showMedia);
	}

	function dynamicforminput_changingAsset_binding(value) {
		changingAsset = value;
		$$invalidate(2, changingAsset);
	}

	function dynamicforminput_localMediaList_binding(value) {
		localMediaList = value;
		$$invalidate(3, localMediaList);
	}

	$$self.$$set = $$props => {
		if ("content" in $$props) $$invalidate(0, content = $$props.content);
		if ("showMedia" in $$props) $$invalidate(1, showMedia = $$props.showMedia);
		if ("changingAsset" in $$props) $$invalidate(2, changingAsset = $$props.changingAsset);
		if ("localMediaList" in $$props) $$invalidate(3, localMediaList = $$props.localMediaList);
	};

	return [
		content,
		showMedia,
		changingAsset,
		localMediaList,
		dynamicforminput_field_binding,
		dynamicforminput_showMedia_binding,
		dynamicforminput_changingAsset_binding,
		dynamicforminput_localMediaList_binding
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			content: 0,
			showMedia: 1,
			changingAsset: 2,
			localMediaList: 3
		});
	}
}

export default Component;