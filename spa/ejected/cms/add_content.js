/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	null_to_empty,
	run_all,
	safe_not_equal,
	set_data,
	set_input_value,
	space,
	text,
	transition_in,
	transition_out
} from '../../web_modules/svelte/internal/index.mjs';

import blueprints from '../blueprints.js';
import ButtonWrapper from './button_wrapper.js';
import validateFilename from './validate_filename.js';

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[13] = list[i];
	return child_ctx;
}

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i];
	return child_ctx;
}

// (45:0) {:else}
function create_else_block(ctx) {
	let h1;
	let t0;
	let t1;
	let div;
	let each_value_1 = blueprints;
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			h1 = element("h1");
			t0 = text("Add content of type:");
			t1 = space();
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Add content of type:");
			h1_nodes.forEach(detach);
			t1 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "blueprints svelte-17xmg29");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			insert(target, t1, anchor);
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*setType, blueprints*/ 8) {
				each_value_1 = blueprints;
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t1);
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (27:0) {#if selectedType}
function create_if_block(ctx) {
	let h1;
	let t0;
	let t1;
	let t2;
	let t3;
	let div;
	let span0;
	let t4;
	let t5;
	let t6;
	let t7;
	let input;
	let input_class_value;
	let t8;
	let span1;
	let t9;
	let t10;
	let t11;
	let buttonwrapper;
	let current;
	let mounted;
	let dispose;
	let if_block = /*validationErrors*/ ctx[2] && create_if_block_1(ctx);

	buttonwrapper = new ButtonWrapper({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			h1 = element("h1");
			t0 = text("Set ");
			t1 = text(/*selectedType*/ ctx[1]);
			t2 = text(" filename:");
			t3 = space();
			div = element("div");
			span0 = element("span");
			t4 = text("content/");
			t5 = text(/*selectedType*/ ctx[1]);
			t6 = text("/");
			t7 = space();
			input = element("input");
			t8 = space();
			span1 = element("span");
			t9 = text(".json");
			t10 = space();
			if (if_block) if_block.c();
			t11 = space();
			create_component(buttonwrapper.$$.fragment);
			this.h();
		},
		l(nodes) {
			h1 = claim_element(nodes, "H1", {});
			var h1_nodes = children(h1);
			t0 = claim_text(h1_nodes, "Set ");
			t1 = claim_text(h1_nodes, /*selectedType*/ ctx[1]);
			t2 = claim_text(h1_nodes, " filename:");
			h1_nodes.forEach(detach);
			t3 = claim_space(nodes);
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			span0 = claim_element(div_nodes, "SPAN", {});
			var span0_nodes = children(span0);
			t4 = claim_text(span0_nodes, "content/");
			t5 = claim_text(span0_nodes, /*selectedType*/ ctx[1]);
			t6 = claim_text(span0_nodes, "/");
			span0_nodes.forEach(detach);
			t7 = claim_space(div_nodes);
			input = claim_element(div_nodes, "INPUT", { placeholder: true, class: true });
			t8 = claim_space(div_nodes);
			span1 = claim_element(div_nodes, "SPAN", {});
			var span1_nodes = children(span1);
			t9 = claim_text(span1_nodes, ".json");
			span1_nodes.forEach(detach);
			div_nodes.forEach(detach);
			t10 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			t11 = claim_space(nodes);
			claim_component(buttonwrapper.$$.fragment, nodes);
			this.h();
		},
		h() {
			attr(input, "placeholder", "filename");
			attr(input, "class", input_class_value = "" + (null_to_empty(/*validationErrors*/ ctx[2].length > 0 ? "error" : "") + " svelte-17xmg29"));
			attr(div, "class", "filename svelte-17xmg29");
		},
		m(target, anchor) {
			insert(target, h1, anchor);
			append(h1, t0);
			append(h1, t1);
			append(h1, t2);
			insert(target, t3, anchor);
			insert(target, div, anchor);
			append(div, span0);
			append(span0, t4);
			append(span0, t5);
			append(span0, t6);
			append(div, t7);
			append(div, input);
			set_input_value(input, /*filename*/ ctx[0]);
			append(div, t8);
			append(div, span1);
			append(span1, t9);
			insert(target, t10, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, t11, anchor);
			mount_component(buttonwrapper, target, anchor);
			current = true;

			if (!mounted) {
				dispose = listen(input, "input", /*input_input_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty & /*selectedType*/ 2) set_data(t1, /*selectedType*/ ctx[1]);
			if (!current || dirty & /*selectedType*/ 2) set_data(t5, /*selectedType*/ ctx[1]);

			if (!current || dirty & /*validationErrors*/ 4 && input_class_value !== (input_class_value = "" + (null_to_empty(/*validationErrors*/ ctx[2].length > 0 ? "error" : "") + " svelte-17xmg29"))) {
				attr(input, "class", input_class_value);
			}

			if (dirty & /*filename*/ 1 && input.value !== /*filename*/ ctx[0]) {
				set_input_value(input, /*filename*/ ctx[0]);
			}

			if (/*validationErrors*/ ctx[2]) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_1(ctx);
					if_block.c();
					if_block.m(t11.parentNode, t11);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}

			const buttonwrapper_changes = {};

			if (dirty & /*$$scope*/ 65536) {
				buttonwrapper_changes.$$scope = { dirty, ctx };
			}

			buttonwrapper.$set(buttonwrapper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(buttonwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buttonwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(h1);
			if (detaching) detach(t3);
			if (detaching) detach(div);
			if (detaching) detach(t10);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(t11);
			destroy_component(buttonwrapper, detaching);
			mounted = false;
			dispose();
		}
	};
}

// (49:4) {#each blueprints as blueprint}
function create_each_block_1(ctx) {
	let button;
	let t_value = /*blueprint*/ ctx[13].type + "";
	let t;
	let mounted;
	let dispose;

	function click_handler_1() {
		return /*click_handler_1*/ ctx[9](/*blueprint*/ ctx[13]);
	}

	return {
		c() {
			button = element("button");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t = claim_text(button_nodes, t_value);
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button, "class", "blueprint svelte-17xmg29");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, t);

			if (!mounted) {
				dispose = listen(button, "click", click_handler_1);
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (34:4) {#if validationErrors}
function create_if_block_1(ctx) {
	let ul;
	let each_value = /*validationErrors*/ ctx[2];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			ul = element("ul");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			ul = claim_element(nodes, "UL", { class: true });
			var ul_nodes = children(ul);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(ul_nodes);
			}

			ul_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(ul, "class", "errors svelte-17xmg29");
		},
		m(target, anchor) {
			insert(target, ul, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(ul, null);
			}
		},
		p(ctx, dirty) {
			if (dirty & /*validationErrors*/ 4) {
				each_value = /*validationErrors*/ ctx[2];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(ul, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(ul);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (36:8) {#each validationErrors as error}
function create_each_block(ctx) {
	let li;
	let t_value = /*error*/ ctx[10] + "";
	let t;

	return {
		c() {
			li = element("li");
			t = text(t_value);
		},
		l(nodes) {
			li = claim_element(nodes, "LI", {});
			var li_nodes = children(li);
			t = claim_text(li_nodes, t_value);
			li_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, li, anchor);
			append(li, t);
		},
		p(ctx, dirty) {
			if (dirty & /*validationErrors*/ 4 && t_value !== (t_value = /*error*/ ctx[10] + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(li);
		}
	};
}

// (41:4) <ButtonWrapper>
function create_default_slot(ctx) {
	let button0;
	let t0;
	let t1;
	let button1;
	let t2;
	let mounted;
	let dispose;

	return {
		c() {
			button0 = element("button");
			t0 = text("Set Filename");
			t1 = space();
			button1 = element("button");
			t2 = text("Go back");
			this.h();
		},
		l(nodes) {
			button0 = claim_element(nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t0 = claim_text(button0_nodes, "Set Filename");
			button0_nodes.forEach(detach);
			t1 = claim_space(nodes);
			button1 = claim_element(nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t2 = claim_text(button1_nodes, "Go back");
			button1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button0, "class", "button svelte-17xmg29");
			attr(button1, "class", "button svelte-17xmg29");
		},
		m(target, anchor) {
			insert(target, button0, anchor);
			append(button0, t0);
			insert(target, t1, anchor);
			insert(target, button1, anchor);
			append(button1, t2);

			if (!mounted) {
				dispose = [
					listen(button0, "click", /*checkFilename*/ ctx[4]),
					listen(button1, "click", /*click_handler*/ ctx[8])
				];

				mounted = true;
			}
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(button0);
			if (detaching) detach(t1);
			if (detaching) detach(button1);
			mounted = false;
			run_all(dispose);
		}
	};
}

function create_fragment(ctx) {
	let current_block_type_index;
	let if_block;
	let if_block_anchor;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (/*selectedType*/ ctx[1]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_blocks[current_block_type_index].m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(if_block_anchor.parentNode, if_block_anchor);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if_blocks[current_block_type_index].d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { showAdd } = $$props, { showEditor } = $$props;
	let filename = "";
	let selectedType;

	const setType = type => {
		$$invalidate(1, selectedType = type);
	};

	let validationErrors = [];

	const checkFilename = () => {
		$$invalidate(2, validationErrors = validateFilename(filename));

		// No errors, redirect to "add" page
		if (validationErrors.length === 0) {
			history.pushState(null, "", "/#add/" + selectedType + "/" + filename);
			$$invalidate(5, showAdd = false);
			$$invalidate(6, showEditor = true);
		}
	};

	function input_input_handler() {
		filename = this.value;
		$$invalidate(0, filename);
	}

	const click_handler = () => setType(null);
	const click_handler_1 = blueprint => setType(blueprint.type);

	$$self.$$set = $$props => {
		if ("showAdd" in $$props) $$invalidate(5, showAdd = $$props.showAdd);
		if ("showEditor" in $$props) $$invalidate(6, showEditor = $$props.showEditor);
	};

	return [
		filename,
		selectedType,
		validationErrors,
		setType,
		checkFilename,
		showAdd,
		showEditor,
		input_input_handler,
		click_handler,
		click_handler_1
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { showAdd: 5, showEditor: 6 });
	}
}

export default Component;