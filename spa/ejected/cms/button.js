/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	bubble,
	children,
	claim_element,
	claim_space,
	claim_text,
	destroy_each,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	prevent_default,
	run_all,
	safe_not_equal,
	set_data,
	space,
	text
} from '../../web_modules/svelte/internal/index.mjs';

import { publish } from './publish.js';
import { postLocal } from './post_local.js';
import { env } from '../env.js';
import { findFileReferences } from './file_references.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[15] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[18] = list[i];
	child_ctx[20] = i;
	return child_ctx;
}

// (39:4) {#if confirmTooltip}
function create_if_block_3(ctx) {
	let div3;
	let div0;
	let t0;
	let div1;
	let t1;
	let t2;
	let t3;
	let div2;
	let button0;
	let t4;
	let t5;
	let button1;
	let t6;
	let mounted;
	let dispose;
	let each_value = /*commitList*/ ctx[0];
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div3 = element("div");
			div0 = element("div");
			t0 = space();
			div1 = element("div");
			t1 = text("Are you sure you want to permanently remove:");
			t2 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t3 = space();
			div2 = element("div");
			button0 = element("button");
			t4 = text("Yes");
			t5 = space();
			button1 = element("button");
			t6 = text("Cancel");
			this.h();
		},
		l(nodes) {
			div3 = claim_element(nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			div0 = claim_element(div3_nodes, "DIV", { class: true });
			children(div0).forEach(detach);
			t0 = claim_space(div3_nodes);
			div1 = claim_element(div3_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			t1 = claim_text(div1_nodes, "Are you sure you want to permanently remove:");
			div1_nodes.forEach(detach);
			t2 = claim_space(div3_nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div3_nodes);
			}

			t3 = claim_space(div3_nodes);
			div2 = claim_element(div3_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			button0 = claim_element(div2_nodes, "BUTTON", { class: true });
			var button0_nodes = children(button0);
			t4 = claim_text(button0_nodes, "Yes");
			button0_nodes.forEach(detach);
			t5 = claim_space(div2_nodes);
			button1 = claim_element(div2_nodes, "BUTTON", { class: true });
			var button1_nodes = children(button1);
			t6 = claim_text(button1_nodes, "Cancel");
			button1_nodes.forEach(detach);
			div2_nodes.forEach(detach);
			div3_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div0, "class", "carrot svelte-hyt701");
			attr(div1, "class", "warning svelte-hyt701");
			attr(button0, "class", "primary svelte-hyt701");
			attr(button1, "class", "secondary svelte-hyt701");
			attr(div2, "class", "confirm-actions svelte-hyt701");
			attr(div3, "class", "confirm svelte-hyt701");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div0);
			append(div3, t0);
			append(div3, div1);
			append(div1, t1);
			append(div3, t2);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div3, null);
			}

			append(div3, t3);
			append(div3, div2);
			append(div2, button0);
			append(button0, t4);
			append(div2, t5);
			append(div2, button1);
			append(button1, t6);

			if (!mounted) {
				dispose = [
					listen(button0, "click", prevent_default(/*onSubmit*/ ctx[6])),
					listen(button1, "click", prevent_default(/*click_handler_1*/ ctx[11]))
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*findFileReferences, commitList*/ 1) {
				each_value = /*commitList*/ ctx[0];
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div3, t3);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div3);
			destroy_each(each_blocks, detaching);
			mounted = false;
			run_all(dispose);
		}
	};
}

// (46:20) {#if findFileReferences(commitItem.file).length > 0}
function create_if_block_4(ctx) {
	let div;
	let t0;
	let t1;
	let each_1_anchor;
	let each_value_1 = findFileReferences(/*commitItem*/ ctx[15].file);
	let each_blocks = [];

	for (let i = 0; i < each_value_1.length; i += 1) {
		each_blocks[i] = create_each_block_1(get_each_context_1(ctx, each_value_1, i));
	}

	return {
		c() {
			div = element("div");
			t0 = text("This file is being used on:");
			t1 = space();

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			each_1_anchor = empty();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, "This file is being used on:");
			div_nodes.forEach(detach);
			t1 = claim_space(nodes);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(nodes);
			}

			each_1_anchor = empty();
			this.h();
		},
		h() {
			attr(div, "class", "file-reference svelte-hyt701");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			insert(target, t1, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(target, anchor);
			}

			insert(target, each_1_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*findFileReferences, commitList*/ 1) {
				each_value_1 = findFileReferences(/*commitItem*/ ctx[15].file);
				let i;

				for (i = 0; i < each_value_1.length; i += 1) {
					const child_ctx = get_each_context_1(ctx, each_value_1, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block_1(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(each_1_anchor.parentNode, each_1_anchor);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value_1.length;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching) detach(t1);
			destroy_each(each_blocks, detaching);
			if (detaching) detach(each_1_anchor);
		}
	};
}

// (51:65) {#if i < findFileReferences(commitItem.file).length -1}
function create_if_block_5(ctx) {
	let t;

	return {
		c() {
			t = text(", ");
		},
		l(nodes) {
			t = claim_text(nodes, ", ");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (50:24) {#each findFileReferences(commitItem.file) as reference, i}
function create_each_block_1(ctx) {
	let a;
	let t_value = /*reference*/ ctx[18] + "";
	let t;
	let a_href_value;
	let show_if = /*i*/ ctx[20] < findFileReferences(/*commitItem*/ ctx[15].file).length - 1;
	let if_block_anchor;
	let if_block = show_if && create_if_block_5(ctx);

	return {
		c() {
			a = element("a");
			t = text(t_value);
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l(nodes) {
			a = claim_element(nodes, "A", { href: true });
			var a_nodes = children(a);
			t = claim_text(a_nodes, t_value);
			a_nodes.forEach(detach);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h() {
			attr(a, "href", a_href_value = /*reference*/ ctx[18]);
		},
		m(target, anchor) {
			insert(target, a, anchor);
			append(a, t);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*commitList*/ 1 && t_value !== (t_value = /*reference*/ ctx[18] + "")) set_data(t, t_value);

			if (dirty & /*commitList*/ 1 && a_href_value !== (a_href_value = /*reference*/ ctx[18])) {
				attr(a, "href", a_href_value);
			}

			if (dirty & /*commitList*/ 1) show_if = /*i*/ ctx[20] < findFileReferences(/*commitItem*/ ctx[15].file).length - 1;

			if (show_if) {
				if (if_block) {
					
				} else {
					if_block = create_if_block_5(ctx);
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(a);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

// (43:12) {#each commitList as commitItem}
function create_each_block(ctx) {
	let div;
	let t0_value = /*commitItem*/ ctx[15].file + "";
	let t0;
	let t1;
	let show_if = findFileReferences(/*commitItem*/ ctx[15].file).length > 0;
	let if_block = show_if && create_if_block_4(ctx);

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			t0 = claim_text(div_nodes, t0_value);
			t1 = claim_space(div_nodes);
			if (if_block) if_block.l(div_nodes);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "delete-filepath svelte-hyt701");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			if (if_block) if_block.m(div, null);
		},
		p(ctx, dirty) {
			if (dirty & /*commitList*/ 1 && t0_value !== (t0_value = /*commitItem*/ ctx[15].file + "")) set_data(t0, t0_value);
			if (dirty & /*commitList*/ 1) show_if = findFileReferences(/*commitItem*/ ctx[15].file).length > 0;

			if (show_if) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block_4(ctx);
					if_block.c();
					if_block.m(div, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			if (if_block) if_block.d();
		}
	};
}

// (85:8) {:else}
function create_else_block(ctx) {
	let t;

	return {
		c() {
			t = text(/*buttonText*/ ctx[1]);
		},
		l(nodes) {
			t = claim_text(nodes, /*buttonText*/ ctx[1]);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*buttonText*/ 2) set_data(t, /*buttonText*/ ctx[1]);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (83:35) 
function create_if_block_2(ctx) {
	let t;

	return {
		c() {
			t = text("Changes committed");
		},
		l(nodes) {
			t = claim_text(nodes, "Changes committed");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (81:37) 
function create_if_block_1(ctx) {
	let t;

	return {
		c() {
			t = text("Error saving");
		},
		l(nodes) {
			t = claim_text(nodes, "Error saving");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (79:8) {#if status == "sending"}
function create_if_block(ctx) {
	let t;

	return {
		c() {
			t = text("Sending...");
		},
		l(nodes) {
			t = claim_text(nodes, "Sending...");
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p: noop,
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let t;
	let button;
	let button_class_value;
	let mounted;
	let dispose;
	let if_block0 = /*confirmTooltip*/ ctx[5] && create_if_block_3(ctx);

	function select_block_type(ctx, dirty) {
		if (/*status*/ ctx[4] == "sending") return create_if_block;
		if (/*status*/ ctx[4] == "failed") return create_if_block_1;
		if (/*status*/ ctx[4] == "sent") return create_if_block_2;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block1 = current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if (if_block0) if_block0.c();
			t = space();
			button = element("button");
			if_block1.c();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block0) if_block0.l(div_nodes);
			t = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", { type: true, class: true });
			var button_nodes = children(button);
			if_block1.l(button_nodes);
			button_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button, "type", "submit");
			button.disabled = /*status*/ ctx[4];
			attr(button, "class", button_class_value = "" + (/*status*/ ctx[4] + " " + /*buttonStyle*/ ctx[3] + " svelte-hyt701"));
			attr(div, "class", "button svelte-hyt701");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block0) if_block0.m(div, null);
			append(div, t);
			append(div, button);
			if_block1.m(button, null);

			if (!mounted) {
				dispose = [
					listen(button, "click", prevent_default(/*click_handler_2*/ ctx[12])),
					listen(button, "click", /*click_handler*/ ctx[10])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (/*confirmTooltip*/ ctx[5]) {
				if (if_block0) {
					if_block0.p(ctx, dirty);
				} else {
					if_block0 = create_if_block_3(ctx);
					if_block0.c();
					if_block0.m(div, t);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block1) {
				if_block1.p(ctx, dirty);
			} else {
				if_block1.d(1);
				if_block1 = current_block_type(ctx);

				if (if_block1) {
					if_block1.c();
					if_block1.m(button, null);
				}
			}

			if (dirty & /*status*/ 16) {
				button.disabled = /*status*/ ctx[4];
			}

			if (dirty & /*status, buttonStyle*/ 24 && button_class_value !== (button_class_value = "" + (/*status*/ ctx[4] + " " + /*buttonStyle*/ ctx[3] + " svelte-hyt701"))) {
				attr(button, "class", button_class_value);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
			if (if_block0) if_block0.d();
			if_block1.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { commitList } = $$props,
		{ shadowContent } = $$props,
		{ buttonText } = $$props,
		{ action } = $$props,
		{ encoding } = $$props,
		{ afterSubmit } = $$props;

	let { buttonStyle = "primary" } = $$props;
	const local = env.local ?? false;
	let status, confirmTooltip;

	const onSubmit = async () => {
		$$invalidate(5, confirmTooltip = false);
		$$invalidate(4, status = "sending");

		try {
			if (local) {
				await postLocal(commitList, shadowContent, action, encoding);
			} else {
				await publish(commitList, shadowContent, action, encoding);
			}

			$$invalidate(4, status = "sent");
			afterSubmit?.();
			resetStatus();
		} catch(error) {
			$$invalidate(4, status = "failed");
			resetStatus();
			throw error;
		}
	};

	const resetStatus = () => {
		setTimeout(
			() => {
				$$invalidate(4, status = "");
				$$invalidate(0, commitList = []);
			},
			900
		);
	};

	function click_handler(event) {
		bubble.call(this, $$self, event);
	}

	const click_handler_1 = () => $$invalidate(5, confirmTooltip = false);

	const click_handler_2 = () => action === "delete"
	? $$invalidate(5, confirmTooltip = true)
	: action ? onSubmit() : null;

	$$self.$$set = $$props => {
		if ("commitList" in $$props) $$invalidate(0, commitList = $$props.commitList);
		if ("shadowContent" in $$props) $$invalidate(7, shadowContent = $$props.shadowContent);
		if ("buttonText" in $$props) $$invalidate(1, buttonText = $$props.buttonText);
		if ("action" in $$props) $$invalidate(2, action = $$props.action);
		if ("encoding" in $$props) $$invalidate(8, encoding = $$props.encoding);
		if ("afterSubmit" in $$props) $$invalidate(9, afterSubmit = $$props.afterSubmit);
		if ("buttonStyle" in $$props) $$invalidate(3, buttonStyle = $$props.buttonStyle);
	};

	return [
		commitList,
		buttonText,
		action,
		buttonStyle,
		status,
		confirmTooltip,
		onSubmit,
		shadowContent,
		encoding,
		afterSubmit,
		click_handler,
		click_handler_1,
		click_handler_2
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			commitList: 0,
			shadowContent: 7,
			buttonText: 1,
			action: 2,
			encoding: 8,
			afterSubmit: 9,
			buttonStyle: 3
		});
	}
}

export default Component;