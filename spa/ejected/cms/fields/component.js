/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_flush_callback,
	add_render_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	claim_text,
	create_animation,
	create_bidirectional_transition,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	empty,
	fix_and_outro_and_destroy_block,
	fix_position,
	group_outros,
	init,
	insert,
	is_function,
	listen,
	mount_component,
	noop,
	null_to_empty,
	prevent_default,
	run_all,
	safe_not_equal,
	set_data,
	space,
	svg_element,
	text,
	transition_in,
	transition_out,
	update_keyed_each
} from '../../../web_modules/svelte/internal/index.mjs';

import DynamicFormInput from '../dynamic_form_input.js';
import allComponentDefaults from '../../component_defaults.js';
import allComponentSchemas from '../../component_schemas.js';

// Accordion
import { slide } from '../../../web_modules/svelte/transition/index.mjs';

// Drag and drop
import { flip } from '../../../web_modules/svelte/animate/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[51] = list[i];
	return child_ctx;
}

function get_each_context_1(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[54] = list[i];
	child_ctx[55] = list;
	child_ctx[56] = i;
	return child_ctx;
}

// (243:16) {:else}
function create_else_block(ctx) {
	let t0;
	let t1_value = /*key*/ ctx[56] + "";
	let t1;

	return {
		c() {
			t0 = text("Component ");
			t1 = text(t1_value);
		},
		l(nodes) {
			t0 = claim_text(nodes, "Component ");
			t1 = claim_text(nodes, t1_value);
		},
		m(target, anchor) {
			insert(target, t0, anchor);
			insert(target, t1, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*field*/ 1 && t1_value !== (t1_value = /*key*/ ctx[56] + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(t0);
			if (detaching) detach(t1);
		}
	};
}

// (241:65) 
function create_if_block_8(ctx) {
	let t_value = (Object.values(/*value*/ ctx[54])[0].constructor === ("").constructor
	? Object.values(/*value*/ ctx[54])[0].replace(/<[^>]*>?/gm, "").slice(0, 20).concat(/*value*/ ctx[54].length > 20 ? "..." : "")
	: Object.keys(/*value*/ ctx[54])[0]) + "";

	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*field*/ 1 && t_value !== (t_value = (Object.values(/*value*/ ctx[54])[0].constructor === ("").constructor
			? Object.values(/*value*/ ctx[54])[0].replace(/<[^>]*>?/gm, "").slice(0, 20).concat(/*value*/ ctx[54].length > 20 ? "..." : "")
			: Object.keys(/*value*/ ctx[54])[0]) + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (239:16) {#if value.constructor === "".constructor}
function create_if_block_7(ctx) {
	let t_value = /*value*/ ctx[54].replace(/<[^>]*>?/gm, "").slice(0, 20).concat(/*value*/ ctx[54].length > 20 ? "..." : "") + "";
	let t;

	return {
		c() {
			t = text(t_value);
		},
		l(nodes) {
			t = claim_text(nodes, t_value);
		},
		m(target, anchor) {
			insert(target, t, anchor);
		},
		p(ctx, dirty) {
			if (dirty[0] & /*field*/ 1 && t_value !== (t_value = /*value*/ ctx[54].replace(/<[^>]*>?/gm, "").slice(0, 20).concat(/*value*/ ctx[54].length > 20 ? "..." : "") + "")) set_data(t, t_value);
		},
		d(detaching) {
			if (detaching) detach(t);
		}
	};
}

// (249:16) {#if removesItems}
function create_if_block_6(ctx) {
	let button;
	let svg;
	let path0;
	let path1;
	let mounted;
	let dispose;

	function click_handler_2() {
		return /*click_handler_2*/ ctx[37](/*value*/ ctx[54]);
	}

	return {
		c() {
			button = element("button");
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);

			svg = claim_element(
				button_nodes,
				"svg",
				{
					xmlns: true,
					height: true,
					viewBox: true,
					width: true
				},
				1
			);

			var svg_nodes = children(svg);
			path0 = claim_element(svg_nodes, "path", { d: true, fill: true }, 1);
			children(path0).forEach(detach);
			path1 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "d", "M0 0h24v24H0z");
			attr(path0, "fill", "none");
			attr(path1, "d", "M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "height", "16");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "width", "16");
			attr(button, "class", "close svelte-1r2hyh9");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, svg);
			append(svg, path0);
			append(svg, path1);

			if (!mounted) {
				dispose = listen(button, "click", prevent_default(click_handler_2));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
		},
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (258:8) {#if openKeys.includes(key)}
function create_if_block_5(ctx) {
	let div;
	let dynamicforminput;
	let updating_field;
	let updating_showMedia;
	let updating_changingAsset;
	let updating_localMediaList;
	let div_transition;
	let current;

	function dynamicforminput_field_binding(value) {
		/*dynamicforminput_field_binding*/ ctx[38](value, /*key*/ ctx[56]);
	}

	function dynamicforminput_showMedia_binding(value) {
		/*dynamicforminput_showMedia_binding*/ ctx[39](value);
	}

	function dynamicforminput_changingAsset_binding(value) {
		/*dynamicforminput_changingAsset_binding*/ ctx[40](value);
	}

	function dynamicforminput_localMediaList_binding(value) {
		/*dynamicforminput_localMediaList_binding*/ ctx[41](value);
	}

	let dynamicforminput_props = {
		label: null,
		parentKeys: "",
		schema: /*compSchema*/ ctx[8]
	};

	if (/*field*/ ctx[0][/*key*/ ctx[56]] !== void 0) {
		dynamicforminput_props.field = /*field*/ ctx[0][/*key*/ ctx[56]];
	}

	if (/*showMedia*/ ctx[1] !== void 0) {
		dynamicforminput_props.showMedia = /*showMedia*/ ctx[1];
	}

	if (/*changingAsset*/ ctx[2] !== void 0) {
		dynamicforminput_props.changingAsset = /*changingAsset*/ ctx[2];
	}

	if (/*localMediaList*/ ctx[3] !== void 0) {
		dynamicforminput_props.localMediaList = /*localMediaList*/ ctx[3];
	}

	dynamicforminput = new DynamicFormInput({ props: dynamicforminput_props });
	binding_callbacks.push(() => bind(dynamicforminput, "field", dynamicforminput_field_binding));
	binding_callbacks.push(() => bind(dynamicforminput, "showMedia", dynamicforminput_showMedia_binding));
	binding_callbacks.push(() => bind(dynamicforminput, "changingAsset", dynamicforminput_changingAsset_binding));
	binding_callbacks.push(() => bind(dynamicforminput, "localMediaList", dynamicforminput_localMediaList_binding));

	return {
		c() {
			div = element("div");
			create_component(dynamicforminput.$$.fragment);
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {});
			var div_nodes = children(div);
			claim_component(dynamicforminput.$$.fragment, div_nodes);
			div_nodes.forEach(detach);
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(dynamicforminput, div, null);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const dynamicforminput_changes = {};
			if (dirty[0] & /*compSchema*/ 256) dynamicforminput_changes.schema = /*compSchema*/ ctx[8];

			if (!updating_field && dirty[0] & /*field*/ 1) {
				updating_field = true;
				dynamicforminput_changes.field = /*field*/ ctx[0][/*key*/ ctx[56]];
				add_flush_callback(() => updating_field = false);
			}

			if (!updating_showMedia && dirty[0] & /*showMedia*/ 2) {
				updating_showMedia = true;
				dynamicforminput_changes.showMedia = /*showMedia*/ ctx[1];
				add_flush_callback(() => updating_showMedia = false);
			}

			if (!updating_changingAsset && dirty[0] & /*changingAsset*/ 4) {
				updating_changingAsset = true;
				dynamicforminput_changes.changingAsset = /*changingAsset*/ ctx[2];
				add_flush_callback(() => updating_changingAsset = false);
			}

			if (!updating_localMediaList && dirty[0] & /*localMediaList*/ 8) {
				updating_localMediaList = true;
				dynamicforminput_changes.localMediaList = /*localMediaList*/ ctx[3];
				add_flush_callback(() => updating_localMediaList = false);
			}

			dynamicforminput.$set(dynamicforminput_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dynamicforminput.$$.fragment, local);

			add_render_callback(() => {
				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, true);
				div_transition.run(1);
			});

			current = true;
		},
		o(local) {
			transition_out(dynamicforminput.$$.fragment, local);
			if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, false);
			div_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(dynamicforminput);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (192:4) {#each field as value, key (compID = isOpen ? key : JSON.stringify(value))}
function create_each_block_1(key_2, ctx) {
	let div5;
	let div4;
	let div0;
	let svg0;
	let path0;
	let circle0;
	let circle1;
	let circle2;
	let circle3;
	let circle4;
	let circle5;
	let t0;
	let div1;
	let button0;
	let svg1;
	let path1;
	let path2;
	let button0_style_value;
	let t1;
	let button1;
	let svg2;
	let path3;
	let path4;
	let button1_style_value;
	let t2;
	let div2;
	let t3;
	let div3;
	let t4;
	let show_if = /*openKeys*/ ctx[10].includes(/*key*/ ctx[56]);
	let t5;
	let div5_id_value;
	let div5_data_index_value;
	let rect;
	let stop_animation = noop;
	let current;
	let mounted;
	let dispose;

	function click_handler(...args) {
		return /*click_handler*/ ctx[35](/*key*/ ctx[56], ...args);
	}

	function click_handler_1(...args) {
		return /*click_handler_1*/ ctx[36](/*key*/ ctx[56], ...args);
	}

	function select_block_type(ctx, dirty) {
		if (/*value*/ ctx[54].constructor === ("").constructor) return create_if_block_7;
		if (/*value*/ ctx[54].constructor === ({}).constructor) return create_if_block_8;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, [-1, -1]);
	let if_block0 = current_block_type(ctx);
	let if_block1 = /*removesItems*/ ctx[7] && create_if_block_6(ctx);
	let if_block2 = show_if && create_if_block_5(ctx);

	return {
		key: key_2,
		first: null,
		c() {
			div5 = element("div");
			div4 = element("div");
			div0 = element("div");
			svg0 = svg_element("svg");
			path0 = svg_element("path");
			circle0 = svg_element("circle");
			circle1 = svg_element("circle");
			circle2 = svg_element("circle");
			circle3 = svg_element("circle");
			circle4 = svg_element("circle");
			circle5 = svg_element("circle");
			t0 = space();
			div1 = element("div");
			button0 = element("button");
			svg1 = svg_element("svg");
			path1 = svg_element("path");
			path2 = svg_element("path");
			t1 = space();
			button1 = element("button");
			svg2 = svg_element("svg");
			path3 = svg_element("path");
			path4 = svg_element("path");
			t2 = space();
			div2 = element("div");
			if_block0.c();
			t3 = space();
			div3 = element("div");
			if (if_block1) if_block1.c();
			t4 = space();
			if (if_block2) if_block2.c();
			t5 = space();
			this.h();
		},
		l(nodes) {
			div5 = claim_element(nodes, "DIV", {
				id: true,
				"data-index": true,
				"data-id": true,
				"data-graby": true,
				class: true
			});

			var div5_nodes = children(div5);
			div4 = claim_element(div5_nodes, "DIV", { class: true });
			var div4_nodes = children(div4);
			div0 = claim_element(div4_nodes, "DIV", { class: true });
			var div0_nodes = children(div0);

			svg0 = claim_element(
				div0_nodes,
				"svg",
				{
					xmlns: true,
					class: true,
					width: true,
					height: true,
					viewBox: true,
					"stroke-width": true,
					stroke: true,
					fill: true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg0_nodes = children(svg0);
			path0 = claim_element(svg0_nodes, "path", { stroke: true, d: true, fill: true }, 1);
			children(path0).forEach(detach);
			circle0 = claim_element(svg0_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle0).forEach(detach);
			circle1 = claim_element(svg0_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle1).forEach(detach);
			circle2 = claim_element(svg0_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle2).forEach(detach);
			circle3 = claim_element(svg0_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle3).forEach(detach);
			circle4 = claim_element(svg0_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle4).forEach(detach);
			circle5 = claim_element(svg0_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle5).forEach(detach);
			svg0_nodes.forEach(detach);
			div0_nodes.forEach(detach);
			t0 = claim_space(div4_nodes);
			div1 = claim_element(div4_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);
			button0 = claim_element(div1_nodes, "BUTTON", { class: true, style: true });
			var button0_nodes = children(button0);

			svg1 = claim_element(
				button0_nodes,
				"svg",
				{
					xmlns: true,
					viewBox: true,
					width: true,
					height: true
				},
				1
			);

			var svg1_nodes = children(svg1);
			path1 = claim_element(svg1_nodes, "path", { d: true, fill: true }, 1);
			children(path1).forEach(detach);
			path2 = claim_element(svg1_nodes, "path", { d: true }, 1);
			children(path2).forEach(detach);
			svg1_nodes.forEach(detach);
			button0_nodes.forEach(detach);
			t1 = claim_space(div1_nodes);
			button1 = claim_element(div1_nodes, "BUTTON", { class: true, style: true });
			var button1_nodes = children(button1);

			svg2 = claim_element(
				button1_nodes,
				"svg",
				{
					xmlns: true,
					viewBox: true,
					width: true,
					height: true
				},
				1
			);

			var svg2_nodes = children(svg2);
			path3 = claim_element(svg2_nodes, "path", { d: true, fill: true }, 1);
			children(path3).forEach(detach);
			path4 = claim_element(svg2_nodes, "path", { d: true }, 1);
			children(path4).forEach(detach);
			svg2_nodes.forEach(detach);
			button1_nodes.forEach(detach);
			div1_nodes.forEach(detach);
			t2 = claim_space(div4_nodes);
			div2 = claim_element(div4_nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			if_block0.l(div2_nodes);
			div2_nodes.forEach(detach);
			t3 = claim_space(div4_nodes);
			div3 = claim_element(div4_nodes, "DIV", { class: true });
			var div3_nodes = children(div3);
			if (if_block1) if_block1.l(div3_nodes);
			div3_nodes.forEach(detach);
			div4_nodes.forEach(detach);
			t4 = claim_space(div5_nodes);
			if (if_block2) if_block2.l(div5_nodes);
			t5 = claim_space(div5_nodes);
			div5_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "stroke", "none");
			attr(path0, "d", "M0 0h24v24H0z");
			attr(path0, "fill", "none");
			attr(circle0, "cx", "5");
			attr(circle0, "cy", "9");
			attr(circle0, "r", "1");
			attr(circle1, "cx", "5");
			attr(circle1, "cy", "15");
			attr(circle1, "r", "1");
			attr(circle2, "cx", "12");
			attr(circle2, "cy", "9");
			attr(circle2, "r", "1");
			attr(circle3, "cx", "12");
			attr(circle3, "cy", "15");
			attr(circle3, "r", "1");
			attr(circle4, "cx", "19");
			attr(circle4, "cy", "9");
			attr(circle4, "r", "1");
			attr(circle5, "cx", "19");
			attr(circle5, "cy", "15");
			attr(circle5, "r", "1");
			attr(svg0, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg0, "class", "icon icon-tabler icon-tabler-grip-horizontal");
			attr(svg0, "width", "30");
			attr(svg0, "height", "30");
			attr(svg0, "viewBox", "0 0 24 24");
			attr(svg0, "stroke-width", "1.5");
			attr(svg0, "stroke", "#2c3e50");
			attr(svg0, "fill", "none");
			attr(svg0, "stroke-linecap", "round");
			attr(svg0, "stroke-linejoin", "round");
			attr(div0, "class", "grip svelte-1r2hyh9");
			attr(path1, "d", "M0 0h24v24H0V0z");
			attr(path1, "fill", "none");
			attr(path2, "d", "M7.41 15.41L12 10.83l4.59 4.58L18 14l-6-6-6 6 1.41 1.41z");
			attr(svg1, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg1, "viewBox", "0 0 24 24");
			attr(svg1, "width", "16px");
			attr(svg1, "height", "16px");
			attr(button0, "class", "up svelte-1r2hyh9");
			attr(button0, "style", button0_style_value = "visibility: " + (/*key*/ ctx[56] > 0 ? "" : "hidden") + ";");
			attr(path3, "d", "M0 0h24v24H0V0z");
			attr(path3, "fill", "none");
			attr(path4, "d", "M7.41 8.59L12 13.17l4.59-4.58L18 10l-6 6-6-6 1.41-1.41z");
			attr(svg2, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg2, "viewBox", "0 0 24 24");
			attr(svg2, "width", "16px");
			attr(svg2, "height", "16px");
			attr(button1, "class", "down svelte-1r2hyh9");

			attr(button1, "style", button1_style_value = "visibility: " + (/*key*/ ctx[56] < /*field*/ ctx[0].length - 1
			? ""
			: "hidden") + ";");

			attr(div1, "class", "buttons svelte-1r2hyh9");
			attr(div2, "class", "content svelte-1r2hyh9");
			attr(div3, "class", "buttons svelte-1r2hyh9");
			attr(div4, "class", "item svelte-1r2hyh9");

			attr(div5, "id", div5_id_value = /*grabbed*/ ctx[12] && /*compID*/ ctx[19] == /*grabbed*/ ctx[12].dataset.id
			? "grabbed"
			: "");

			attr(div5, "data-index", div5_data_index_value = /*key*/ ctx[56]);
			attr(div5, "data-id", /*compID*/ ctx[19]);
			attr(div5, "data-graby", "0");
			attr(div5, "class", "item-wrapper svelte-1r2hyh9");
			this.first = div5;
		},
		m(target, anchor) {
			insert(target, div5, anchor);
			append(div5, div4);
			append(div4, div0);
			append(div0, svg0);
			append(svg0, path0);
			append(svg0, circle0);
			append(svg0, circle1);
			append(svg0, circle2);
			append(svg0, circle3);
			append(svg0, circle4);
			append(svg0, circle5);
			append(div4, t0);
			append(div4, div1);
			append(div1, button0);
			append(button0, svg1);
			append(svg1, path1);
			append(svg1, path2);
			append(div1, t1);
			append(div1, button1);
			append(button1, svg2);
			append(svg2, path3);
			append(svg2, path4);
			append(div4, t2);
			append(div4, div2);
			if_block0.m(div2, null);
			append(div4, t3);
			append(div4, div3);
			if (if_block1) if_block1.m(div3, null);
			append(div5, t4);
			if (if_block2) if_block2.m(div5, null);
			append(div5, t5);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div0, "mousedown", /*mousedown_handler*/ ctx[31]),
					listen(div0, "touchstart", /*touchstart_handler*/ ctx[32]),
					listen(div0, "mouseenter", /*mouseenter_handler*/ ctx[33]),
					listen(div0, "touchmove", /*touchmove_handler*/ ctx[34]),
					listen(button0, "click", prevent_default(click_handler)),
					listen(button1, "click", prevent_default(click_handler_1)),
					listen(div2, "click", prevent_default(function () {
						if (is_function(/*accordion*/ ctx[18](/*key*/ ctx[56], /*value*/ ctx[54]))) /*accordion*/ ctx[18](/*key*/ ctx[56], /*value*/ ctx[54]).apply(this, arguments);
					})),
					listen(div2, "click", function () {
						if (is_function(/*toggleSalt*/ ctx[29](/*value*/ ctx[54]))) /*toggleSalt*/ ctx[29](/*value*/ ctx[54]).apply(this, arguments);
					})
				];

				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (!current || dirty[0] & /*field*/ 1 && button0_style_value !== (button0_style_value = "visibility: " + (/*key*/ ctx[56] > 0 ? "" : "hidden") + ";")) {
				attr(button0, "style", button0_style_value);
			}

			if (!current || dirty[0] & /*field*/ 1 && button1_style_value !== (button1_style_value = "visibility: " + (/*key*/ ctx[56] < /*field*/ ctx[0].length - 1
			? ""
			: "hidden") + ";")) {
				attr(button1, "style", button1_style_value);
			}

			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block0) {
				if_block0.p(ctx, dirty);
			} else {
				if_block0.d(1);
				if_block0 = current_block_type(ctx);

				if (if_block0) {
					if_block0.c();
					if_block0.m(div2, null);
				}
			}

			if (/*removesItems*/ ctx[7]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);
				} else {
					if_block1 = create_if_block_6(ctx);
					if_block1.c();
					if_block1.m(div3, null);
				}
			} else if (if_block1) {
				if_block1.d(1);
				if_block1 = null;
			}

			if (dirty[0] & /*openKeys, field*/ 1025) show_if = /*openKeys*/ ctx[10].includes(/*key*/ ctx[56]);

			if (show_if) {
				if (if_block2) {
					if_block2.p(ctx, dirty);

					if (dirty[0] & /*openKeys, field*/ 1025) {
						transition_in(if_block2, 1);
					}
				} else {
					if_block2 = create_if_block_5(ctx);
					if_block2.c();
					transition_in(if_block2, 1);
					if_block2.m(div5, t5);
				}
			} else if (if_block2) {
				group_outros();

				transition_out(if_block2, 1, 1, () => {
					if_block2 = null;
				});

				check_outros();
			}

			if (!current || dirty[0] & /*grabbed*/ 4096 && div5_id_value !== (div5_id_value = /*grabbed*/ ctx[12] && /*compID*/ ctx[19] == /*grabbed*/ ctx[12].dataset.id
			? "grabbed"
			: "")) {
				attr(div5, "id", div5_id_value);
			}

			if (!current || dirty[0] & /*field*/ 1 && div5_data_index_value !== (div5_data_index_value = /*key*/ ctx[56])) {
				attr(div5, "data-index", div5_data_index_value);
			}
		},
		r() {
			rect = div5.getBoundingClientRect();
		},
		f() {
			fix_position(div5);
			stop_animation();
		},
		a() {
			stop_animation();
			stop_animation = create_animation(div5, rect, flip, { duration: /*isOpen*/ ctx[9] ? null : 200 });
		},
		i(local) {
			if (current) return;
			transition_in(if_block2);
			current = true;
		},
		o(local) {
			transition_out(if_block2);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div5);
			if_block0.d();
			if (if_block1) if_block1.d();
			if (if_block2) if_block2.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

// (274:4) {#if schema && schema[parentKeys]?.options.length > 0}
function create_if_block(ctx) {
	let button;
	let svg;
	let path;
	let circle;
	let line;
	let t0;
	let t1;
	let button_class_value;
	let t2;
	let if_block1_anchor;
	let mounted;
	let dispose;
	let if_block0 = !/*compList*/ ctx[16] && create_if_block_4(ctx);
	let if_block1 = /*compList*/ ctx[16] && create_if_block_1(ctx);

	return {
		c() {
			button = element("button");
			svg = svg_element("svg");
			path = svg_element("path");
			circle = svg_element("circle");
			line = svg_element("line");
			if (if_block0) if_block0.c();
			t0 = text("\n            Add new ");
			t1 = text(/*label*/ ctx[4]);
			t2 = space();
			if (if_block1) if_block1.c();
			if_block1_anchor = empty();
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);

			svg = claim_element(
				button_nodes,
				"svg",
				{
					xmlns: true,
					class: true,
					width: true,
					height: true,
					viewBox: true,
					"stroke-width": true,
					stroke: true,
					fill: true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg_nodes = children(svg);
			path = claim_element(svg_nodes, "path", { stroke: true, d: true, fill: true }, 1);
			children(path).forEach(detach);
			circle = claim_element(svg_nodes, "circle", { cx: true, cy: true, r: true }, 1);
			children(circle).forEach(detach);
			line = claim_element(svg_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line).forEach(detach);
			if (if_block0) if_block0.l(svg_nodes);
			svg_nodes.forEach(detach);
			t0 = claim_text(button_nodes, "\n            Add new ");
			t1 = claim_text(button_nodes, /*label*/ ctx[4]);
			button_nodes.forEach(detach);
			t2 = claim_space(nodes);
			if (if_block1) if_block1.l(nodes);
			if_block1_anchor = empty();
			this.h();
		},
		h() {
			attr(path, "stroke", "none");
			attr(path, "d", "M0 0h24v24H0z");
			attr(path, "fill", "none");
			attr(circle, "cx", "12");
			attr(circle, "cy", "12");
			attr(circle, "r", "9");
			attr(line, "x1", "9");
			attr(line, "y1", "12");
			attr(line, "x2", "15");
			attr(line, "y2", "12");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "icon icon-tabler icon-tabler-circle-plus");
			attr(svg, "width", "24");
			attr(svg, "height", "24");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke-width", "2");
			attr(svg, "stroke", "#1c7fc7");
			attr(svg, "fill", "none");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
			attr(button, "class", button_class_value = "add" + (/*compList*/ ctx[16] ? " open" : "") + " svelte-1r2hyh9");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			append(button, svg);
			append(svg, path);
			append(svg, circle);
			append(svg, line);
			if (if_block0) if_block0.m(svg, null);
			append(button, t0);
			append(button, t1);
			insert(target, t2, anchor);
			if (if_block1) if_block1.m(target, anchor);
			insert(target, if_block1_anchor, anchor);

			if (!mounted) {
				dispose = listen(button, "click", prevent_default(/*toggleCompList*/ ctx[27]));
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!/*compList*/ ctx[16]) {
				if (if_block0) {
					
				} else {
					if_block0 = create_if_block_4(ctx);
					if_block0.c();
					if_block0.m(svg, null);
				}
			} else if (if_block0) {
				if_block0.d(1);
				if_block0 = null;
			}

			if (dirty[0] & /*label*/ 16) set_data(t1, /*label*/ ctx[4]);

			if (dirty[0] & /*compList*/ 65536 && button_class_value !== (button_class_value = "add" + (/*compList*/ ctx[16] ? " open" : "") + " svelte-1r2hyh9")) {
				attr(button, "class", button_class_value);
			}

			if (/*compList*/ ctx[16]) {
				if (if_block1) {
					if_block1.p(ctx, dirty);

					if (dirty[0] & /*compList*/ 65536) {
						transition_in(if_block1, 1);
					}
				} else {
					if_block1 = create_if_block_1(ctx);
					if_block1.c();
					transition_in(if_block1, 1);
					if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
				}
			} else if (if_block1) {
				group_outros();

				transition_out(if_block1, 1, 1, () => {
					if_block1 = null;
				});

				check_outros();
			}
		},
		d(detaching) {
			if (detaching) detach(button);
			if (if_block0) if_block0.d();
			if (detaching) detach(t2);
			if (if_block1) if_block1.d(detaching);
			if (detaching) detach(if_block1_anchor);
			mounted = false;
			dispose();
		}
	};
}

// (280:16) {#if !compList}
function create_if_block_4(ctx) {
	let line;

	return {
		c() {
			line = svg_element("line");
			this.h();
		},
		l(nodes) {
			line = claim_element(nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line).forEach(detach);
			this.h();
		},
		h() {
			attr(line, "x1", "12");
			attr(line, "y1", "9");
			attr(line, "x2", "12");
			attr(line, "y2", "15");
		},
		m(target, anchor) {
			insert(target, line, anchor);
		},
		d(detaching) {
			if (detaching) detach(line);
		}
	};
}

// (286:8) {#if compList}
function create_if_block_1(ctx) {
	let div;
	let div_transition;
	let current;
	let each_value = /*schema*/ ctx[6][/*parentKeys*/ ctx[5]].options;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div_nodes);
			}

			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "add-list svelte-1r2hyh9");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty[0] & /*addComponent, schema, parentKeys, addName*/ 268566624) {
				each_value = /*schema*/ ctx[6][/*parentKeys*/ ctx[5]].options;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(div, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}
		},
		i(local) {
			if (current) return;

			if (local) {
				add_render_callback(() => {
					if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, true);
					div_transition.run(1);
				});
			}

			current = true;
		},
		o(local) {
			if (local) {
				if (!div_transition) div_transition = create_bidirectional_transition(div, slide, { duration: 300 }, false);
				div_transition.run(0);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
			if (detaching && div_transition) div_transition.end();
		}
	};
}

// (298:67) 
function create_if_block_3(ctx) {
	let svg;
	let path;
	let line0;
	let line1;

	return {
		c() {
			svg = svg_element("svg");
			path = svg_element("path");
			line0 = svg_element("line");
			line1 = svg_element("line");
			this.h();
		},
		l(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					class: true,
					width: true,
					height: true,
					viewBox: true,
					"stroke-width": true,
					stroke: true,
					fill: true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg_nodes = children(svg);
			path = claim_element(svg_nodes, "path", { stroke: true, d: true, fill: true }, 1);
			children(path).forEach(detach);
			line0 = claim_element(svg_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line0).forEach(detach);
			line1 = claim_element(svg_nodes, "line", { x1: true, y1: true, x2: true, y2: true }, 1);
			children(line1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path, "stroke", "none");
			attr(path, "d", "M0 0h24v24H0z");
			attr(path, "fill", "none");
			attr(line0, "x1", "18");
			attr(line0, "y1", "6");
			attr(line0, "x2", "6");
			attr(line0, "y2", "18");
			attr(line1, "x1", "6");
			attr(line1, "y1", "6");
			attr(line1, "x2", "18");
			attr(line1, "y2", "18");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "icon icon-tabler icon-tabler-x");
			attr(svg, "width", "15");
			attr(svg, "height", "15");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke-width", "2");
			attr(svg, "stroke", "#ed0f0f");
			attr(svg, "fill", "none");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path);
			append(svg, line0);
			append(svg, line1);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (293:24) {#if addName === option}
function create_if_block_2(ctx) {
	let svg;
	let path0;
	let path1;

	return {
		c() {
			svg = svg_element("svg");
			path0 = svg_element("path");
			path1 = svg_element("path");
			this.h();
		},
		l(nodes) {
			svg = claim_element(
				nodes,
				"svg",
				{
					xmlns: true,
					class: true,
					width: true,
					height: true,
					viewBox: true,
					"stroke-width": true,
					stroke: true,
					fill: true,
					"stroke-linecap": true,
					"stroke-linejoin": true
				},
				1
			);

			var svg_nodes = children(svg);
			path0 = claim_element(svg_nodes, "path", { stroke: true, d: true, fill: true }, 1);
			children(path0).forEach(detach);
			path1 = claim_element(svg_nodes, "path", { d: true }, 1);
			children(path1).forEach(detach);
			svg_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(path0, "stroke", "none");
			attr(path0, "d", "M0 0h24v24H0z");
			attr(path0, "fill", "none");
			attr(path1, "d", "M5 12l5 5l10 -10");
			attr(svg, "xmlns", "http://www.w3.org/2000/svg");
			attr(svg, "class", "icon icon-tabler icon-tabler-check");
			attr(svg, "width", "15");
			attr(svg, "height", "15");
			attr(svg, "viewBox", "0 0 24 24");
			attr(svg, "stroke-width", "2");
			attr(svg, "stroke", "#4bb543");
			attr(svg, "fill", "none");
			attr(svg, "stroke-linecap", "round");
			attr(svg, "stroke-linejoin", "round");
		},
		m(target, anchor) {
			insert(target, svg, anchor);
			append(svg, path0);
			append(svg, path1);
		},
		d(detaching) {
			if (detaching) detach(svg);
		}
	};
}

// (288:16) {#each schema[parentKeys].options as option}
function create_each_block(ctx) {
	let button;
	let t0;
	let t1_value = /*option*/ ctx[51] + "";
	let t1;
	let t2;
	let mounted;
	let dispose;

	function select_block_type_1(ctx, dirty) {
		if (/*addName*/ ctx[17] === /*option*/ ctx[51]) return create_if_block_2;
		if (/*addName*/ ctx[17] === /*option*/ ctx[51] + "not_found") return create_if_block_3;
	}

	let current_block_type = select_block_type_1(ctx, [-1, -1]);
	let if_block = current_block_type && current_block_type(ctx);

	function click_handler_3() {
		return /*click_handler_3*/ ctx[46](/*option*/ ctx[51]);
	}

	return {
		c() {
			button = element("button");
			if (if_block) if_block.c();
			t0 = space();
			t1 = text(t1_value);
			t2 = space();
			this.h();
		},
		l(nodes) {
			button = claim_element(nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			if (if_block) if_block.l(button_nodes);
			t0 = claim_space(button_nodes);
			t1 = claim_text(button_nodes, t1_value);
			t2 = claim_space(button_nodes);
			button_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button, "class", "add-name svelte-1r2hyh9");
		},
		m(target, anchor) {
			insert(target, button, anchor);
			if (if_block) if_block.m(button, null);
			append(button, t0);
			append(button, t1);
			append(button, t2);

			if (!mounted) {
				dispose = listen(button, "click", prevent_default(click_handler_3));
				mounted = true;
			}
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (current_block_type !== (current_block_type = select_block_type_1(ctx, dirty))) {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(button, t0);
				}
			}

			if (dirty[0] & /*schema, parentKeys*/ 96 && t1_value !== (t1_value = /*option*/ ctx[51] + "")) set_data(t1, t1_value);
		},
		d(detaching) {
			if (detaching) detach(button);

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div2;
	let div0;
	let p;
	let div0_class_value;
	let div0_style_value;
	let t0;
	let div1;
	let each_blocks = [];
	let each_1_lookup = new Map();
	let t1;
	let current;
	let mounted;
	let dispose;
	let each_value_1 = /*field*/ ctx[0];

	const get_key = ctx => /*compID*/ ctx[19] = /*isOpen*/ ctx[9]
	? /*key*/ ctx[56]
	: JSON.stringify(/*value*/ ctx[54]);

	for (let i = 0; i < each_value_1.length; i += 1) {
		let child_ctx = get_each_context_1(ctx, each_value_1, i);
		let key = get_key(child_ctx);
		each_1_lookup.set(key, each_blocks[i] = create_each_block_1(key, child_ctx));
	}

	let if_block = /*schema*/ ctx[6] && /*schema*/ ctx[6][/*parentKeys*/ ctx[5]]?.options.length > 0 && create_if_block(ctx);

	return {
		c() {
			div2 = element("div");
			div0 = element("div");
			p = element("p");
			t0 = space();
			div1 = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			t1 = space();
			if (if_block) if_block.c();
			this.h();
		},
		l(nodes) {
			div2 = claim_element(nodes, "DIV", { class: true });
			var div2_nodes = children(div2);
			div0 = claim_element(div2_nodes, "DIV", { id: true, class: true, style: true });
			var div0_nodes = children(div0);
			p = claim_element(div0_nodes, "P", { class: true });
			children(p).forEach(detach);
			div0_nodes.forEach(detach);
			t0 = claim_space(div2_nodes);
			div1 = claim_element(div2_nodes, "DIV", { class: true });
			var div1_nodes = children(div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(div1_nodes);
			}

			div1_nodes.forEach(detach);
			t1 = claim_space(div2_nodes);
			if (if_block) if_block.l(div2_nodes);
			div2_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(p, "class", "svelte-1r2hyh9");
			attr(div0, "id", "ghost");
			attr(div0, "class", div0_class_value = "" + (null_to_empty(/*grabbed*/ ctx[12] ? "item haunting" : "item") + " svelte-1r2hyh9"));
			attr(div0, "style", div0_style_value = "top: " + (/*mouseY*/ ctx[13] + /*offsetY*/ ctx[14] - /*layerY*/ ctx[15]) + "px");
			attr(div1, "class", "list svelte-1r2hyh9");
			attr(div2, "class", "dragdroplist svelte-1r2hyh9");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			append(div2, div0);
			append(div0, p);
			/*div0_binding*/ ctx[30](div0);
			append(div2, t0);
			append(div2, div1);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div1, null);
			}

			append(div2, t1);
			if (if_block) if_block.m(div2, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div1, "mousemove", /*mousemove_handler*/ ctx[42]),
					listen(div1, "touchmove", /*touchmove_handler_1*/ ctx[43]),
					listen(div1, "mouseup", /*mouseup_handler*/ ctx[44]),
					listen(div1, "touchend", /*touchend_handler*/ ctx[45])
				];

				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (!current || dirty[0] & /*grabbed*/ 4096 && div0_class_value !== (div0_class_value = "" + (null_to_empty(/*grabbed*/ ctx[12] ? "item haunting" : "item") + " svelte-1r2hyh9"))) {
				attr(div0, "class", div0_class_value);
			}

			if (!current || dirty[0] & /*mouseY, offsetY, layerY*/ 57344 && div0_style_value !== (div0_style_value = "top: " + (/*mouseY*/ ctx[13] + /*offsetY*/ ctx[14] - /*layerY*/ ctx[15]) + "px")) {
				attr(div0, "style", div0_style_value);
			}

			if (dirty[0] & /*grabbed, compID, field, compSchema, showMedia, changingAsset, localMediaList, openKeys, removeItem, removesItems, accordion, toggleSalt, moveItem, grab, dragEnter, touchEnter, isOpen*/ 635180943) {
				each_value_1 = /*field*/ ctx[0];
				group_outros();
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].r();
				each_blocks = update_keyed_each(each_blocks, dirty, get_key, 1, ctx, each_value_1, each_1_lookup, div1, fix_and_outro_and_destroy_block, create_each_block_1, null, get_each_context_1);
				for (let i = 0; i < each_blocks.length; i += 1) each_blocks[i].a();
				check_outros();
			}

			if (/*schema*/ ctx[6] && /*schema*/ ctx[6][/*parentKeys*/ ctx[5]]?.options.length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					if_block.m(div2, null);
				}
			} else if (if_block) {
				if_block.d(1);
				if_block = null;
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value_1.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div2);
			/*div0_binding*/ ctx[30](null);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].d();
			}

			if (if_block) if_block.d();
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { field } = $$props,
		{ label } = $$props,
		{ showMedia } = $$props,
		{ changingAsset } = $$props,
		{ localMediaList } = $$props,
		{ parentKeys } = $$props,
		{ schema } = $$props;

	const objKeysMatch = (a, b) => {
		let aKeys = Object.keys(a).sort();
		let bKeys = Object.keys(b).sort();

		// Set matching true if keys at this level are equal (starts top-level)
		let matching = JSON.stringify(aKeys) === JSON.stringify(bKeys);

		// Skip if already mismatched at current level
		if (matching) {
			// Loop through the object
			for (let [key, value] of Object.entries(a)) {
				// Make sure we're comparing two objects
				if (value.constructor === ({}).constructor && b.hasOwnProperty(key) && b[key].constructor === ({}).constructor) {
					// Recusively compare keys at new level
					matching = objKeysMatch(value, b[key]);

					if (!matching) {
						break;
					}
				}
			}
		}

		return matching;
	};

	let compSchema;

	const setCompSchema = component => {
		let compDefaults = structuredClone(allComponentDefaults);
		let compSchemas = structuredClone(allComponentSchemas);

		// Deep clone so we're not changing original component
		let b = structuredClone(component);

		// Temp remove salt for comparison
		delete b.plenti_salt;

		for (const c in compDefaults) {
			if (objKeysMatch(compDefaults[c], b)) {
				$$invalidate(8, compSchema = compSchemas[c]);
			}
		}
	};

	let isOpen = false;
	let openKeys = [];

	const accordion = (newKey, component) => {
		setCompSchema(component);

		if (openKeys.length === 1 && openKeys.includes(newKey)) {
			setTimeout(
				() => {
					$$invalidate(9, isOpen = false);
				},
				300
			);
		}

		if (openKeys.includes(newKey)) {
			// Remove key
			$$invalidate(10, openKeys = openKeys.filter(key => key !== newKey));
		} else {
			// Add key
			$$invalidate(10, openKeys = [...openKeys, newKey]);

			$$invalidate(9, isOpen = true);
		}
	};

	let { removesItems = true } = $$props;
	let compID;
	let ghost;
	let grabbed;
	let lastTarget;
	let mouseY = 0; // pointer y coordinate within client
	let offsetY = 0; // y distance from top of grabbed element to pointer
	let layerY = 0; // distance from top of list to top of client

	const grab = (clientY, element) => {
		// modify grabbed element
		$$invalidate(12, grabbed = element);

		$$invalidate(12, grabbed.dataset.grabY = clientY, grabbed);

		// modify ghost element (which is actually dragged)
		$$invalidate(11, ghost.innerHTML = grabbed.innerHTML, ghost);

		// record offset from cursor to top of element
		// (used for positioning ghost)
		$$invalidate(14, offsetY = grabbed.getBoundingClientRect().y - clientY);

		drag(clientY);
	};

	// drag handler updates cursor position
	const drag = clientY => {
		if (grabbed) {
			$$invalidate(13, mouseY = clientY);
			$$invalidate(15, layerY = ghost.parentNode.getBoundingClientRect().y);
		}
	};

	// touchEnter handler emulates the mouseenter event for touch input
	const touchEnter = ev => {
		drag(ev.clientY);

		// trigger dragEnter the first time the cursor moves over a list item
		let target = document.elementFromPoint(ev.clientX, ev.clientY).closest(".item-wrapper");

		if (target && target != lastTarget) {
			lastTarget = target;
			dragEnter(ev, target);
		}
	};

	const dragEnter = (ev, target) => {
		// swap items
		if (grabbed && target != grabbed && target.classList.contains("item-wrapper")) {
			moveItem(parseInt(grabbed.dataset.index), parseInt(target.dataset.index));
		}
	};

	// does the actual moving of items
	const moveItem = (from, to) => {
		let temp = field[from];
		$$invalidate(0, field[from] = field[to], field);
		$$invalidate(0, field[to] = temp, field);
	};

	const release = ev => {
		$$invalidate(12, grabbed = null);
	};

	const removeItem = val => {
		$$invalidate(0, field = field.filter(i => i !== val));
	};

	let compList = false;

	const toggleCompList = () => {
		$$invalidate(16, compList = !compList);
	};

	let addName;

	const addComponent = component => {
		let compDefaults = structuredClone(allComponentDefaults);

		// Check if there is a component default available
		if (component in compDefaults) {
			field.forEach(c => {
				// Check if exact component value exists on page already
				if (JSON.stringify(c) === JSON.stringify(compDefaults[component])) {
					compDefaults[component].plenti_salt = createSalt();
				}
			});

			$$invalidate(0, field = [...field, compDefaults[component]]);
			$$invalidate(17, addName = component);
		} else {
			$$invalidate(17, addName = component + "not_found");
		}

		setTimeout(
			() => {
				$$invalidate(17, addName = "");
			},
			250
		);
	};

	const createSalt = () => {
		// Create salt give duplicate components some uniqueness
		return (Math.random() + 1).toString(36).substring(7);
	};

	const toggleSalt = component => {
		// Check if the component is an object
		if (component.constructor !== ({}).constructor) {
			// It's not an object, so exit (can't add salt)
			return;
		}

		if ("plenti_salt" in component) {
			for (const c of field) {
				// Deep clone so we're not changing original component
				let b = structuredClone(component);

				// Temp remove salt for comparison
				delete b.plenti_salt;

				// Check if exact component value exists on page already
				if (JSON.stringify(c) === JSON.stringify(b)) {
					// Still matching, keep salt
					return;
				}
			}

			

			// No matches, remove salt
			delete component.plenti_salt;

			component = component;
		} else {
			// Check if component matches more than itself
			if (field.filter(c => JSON.stringify(c) === JSON.stringify(component)).length > 1) {
				component.plenti_salt = createSalt();
			}
		}
	};

	function div0_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			ghost = $$value;
			$$invalidate(11, ghost);
		});
	}

	const mousedown_handler = function (ev) {
		grab(ev.clientY, this.closest(".item-wrapper"));
	};

	const touchstart_handler = function (ev) {
		grab(ev.touches[0].clientY, this.closest(".item-wrapper"));
	};

	const mouseenter_handler = function (ev) {
		ev.stopPropagation();
		dragEnter(ev, ev.target.closest(".item-wrapper"));
	};

	const touchmove_handler = function (ev) {
		ev.stopPropagation();
		ev.preventDefault();
		touchEnter(ev.touches[0]);
	};

	const click_handler = function (key, ev) {
		moveItem(key, key - 1);
	};

	const click_handler_1 = function (key, ev) {
		moveItem(key, key + 1);
	};

	const click_handler_2 = value => removeItem(value);

	function dynamicforminput_field_binding(value, key) {
		if ($$self.$$.not_equal(field[key], value)) {
			field[key] = value;
			$$invalidate(0, field);
		}
	}

	function dynamicforminput_showMedia_binding(value) {
		showMedia = value;
		$$invalidate(1, showMedia);
	}

	function dynamicforminput_changingAsset_binding(value) {
		changingAsset = value;
		$$invalidate(2, changingAsset);
	}

	function dynamicforminput_localMediaList_binding(value) {
		localMediaList = value;
		$$invalidate(3, localMediaList);
	}

	const mousemove_handler = function (ev) {
		ev.stopPropagation();
		drag(ev.clientY);
	};

	const touchmove_handler_1 = function (ev) {
		ev.stopPropagation();
		drag(ev.touches[0].clientY);
	};

	const mouseup_handler = function (ev) {
		ev.stopPropagation();
		release(ev);
	};

	const touchend_handler = function (ev) {
		ev.stopPropagation();
		release(ev.touches[0]);
	};

	const click_handler_3 = option => addComponent(option);

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
		if ("label" in $$props) $$invalidate(4, label = $$props.label);
		if ("showMedia" in $$props) $$invalidate(1, showMedia = $$props.showMedia);
		if ("changingAsset" in $$props) $$invalidate(2, changingAsset = $$props.changingAsset);
		if ("localMediaList" in $$props) $$invalidate(3, localMediaList = $$props.localMediaList);
		if ("parentKeys" in $$props) $$invalidate(5, parentKeys = $$props.parentKeys);
		if ("schema" in $$props) $$invalidate(6, schema = $$props.schema);
		if ("removesItems" in $$props) $$invalidate(7, removesItems = $$props.removesItems);
	};

	return [
		field,
		showMedia,
		changingAsset,
		localMediaList,
		label,
		parentKeys,
		schema,
		removesItems,
		compSchema,
		isOpen,
		openKeys,
		ghost,
		grabbed,
		mouseY,
		offsetY,
		layerY,
		compList,
		addName,
		accordion,
		compID,
		grab,
		drag,
		touchEnter,
		dragEnter,
		moveItem,
		release,
		removeItem,
		toggleCompList,
		addComponent,
		toggleSalt,
		div0_binding,
		mousedown_handler,
		touchstart_handler,
		mouseenter_handler,
		touchmove_handler,
		click_handler,
		click_handler_1,
		click_handler_2,
		dynamicforminput_field_binding,
		dynamicforminput_showMedia_binding,
		dynamicforminput_changingAsset_binding,
		dynamicforminput_localMediaList_binding,
		mousemove_handler,
		touchmove_handler_1,
		mouseup_handler,
		touchend_handler,
		click_handler_3
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(
			this,
			options,
			instance,
			create_fragment,
			safe_not_equal,
			{
				field: 0,
				label: 4,
				showMedia: 1,
				changingAsset: 2,
				localMediaList: 3,
				parentKeys: 5,
				schema: 6,
				removesItems: 7
			},
			[-1, -1]
		);
	}
}

export default Component;