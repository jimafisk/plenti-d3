/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_render_callback,
	attr,
	children,
	claim_element,
	detach,
	element,
	empty,
	init,
	insert,
	listen,
	noop,
	safe_not_equal
} from '../../../web_modules/svelte/internal/index.mjs';

function create_else_block(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {
				class: true,
				role: true,
				contenteditable: true
			});

			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "textarea svelte-139jmcz");
			attr(div, "role", "textbox");
			attr(div, "contenteditable", "true");
			if (/*field*/ ctx[0] === void 0) add_render_callback(() => /*div_input_handler_1*/ ctx[5].call(div));
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (/*field*/ ctx[0] !== void 0) {
				div.textContent = /*field*/ ctx[0];
			}

			if (!mounted) {
				dispose = listen(div, "input", /*div_input_handler_1*/ ctx[5]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*field*/ 1 && /*field*/ ctx[0] !== div.textContent) {
				div.textContent = /*field*/ ctx[0];
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

// (10:0) {#if disabled}
function create_if_block(ctx) {
	let div;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", {
				class: true,
				role: true,
				contenteditable: true
			});

			children(div).forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "textarea disabled svelte-139jmcz");
			attr(div, "role", "textbox");
			attr(div, "contenteditable", "false");
			if (/*field*/ ctx[0] === void 0) add_render_callback(() => /*div_input_handler*/ ctx[4].call(div));
		},
		m(target, anchor) {
			insert(target, div, anchor);

			if (/*field*/ ctx[0] !== void 0) {
				div.textContent = /*field*/ ctx[0];
			}

			if (!mounted) {
				dispose = listen(div, "input", /*div_input_handler*/ ctx[4]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*field*/ 1 && /*field*/ ctx[0] !== div.textContent) {
				div.textContent = /*field*/ ctx[0];
			}
		},
		d(detaching) {
			if (detaching) detach(div);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let if_block_anchor;

	function select_block_type(ctx, dirty) {
		if (/*disabled*/ ctx[1]) return create_if_block;
		return create_else_block;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type(ctx);

	return {
		c() {
			if_block.c();
			if_block_anchor = empty();
		},
		l(nodes) {
			if_block.l(nodes);
			if_block_anchor = empty();
		},
		m(target, anchor) {
			if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if_block.d(1);
				if_block = current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { schema } = $$props, { parentKeys } = $$props, { field } = $$props;
	let disabled;

	if (schema && schema[parentKeys]?.options) {
		disabled = schema[parentKeys].options.includes("disabled");
	}

	function div_input_handler() {
		field = this.textContent;
		$$invalidate(0, field);
	}

	function div_input_handler_1() {
		field = this.textContent;
		$$invalidate(0, field);
	}

	$$self.$$set = $$props => {
		if ("schema" in $$props) $$invalidate(2, schema = $$props.schema);
		if ("parentKeys" in $$props) $$invalidate(3, parentKeys = $$props.parentKeys);
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
	};

	return [field, disabled, schema, parentKeys, div_input_handler, div_input_handler_1];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { schema: 2, parentKeys: 3, field: 0 });
	}
}

export default Component;