/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	prevent_default,
	safe_not_equal,
	space,
	text
} from '../../../web_modules/svelte/internal/index.mjs';

import { isImagePath, isDocPath } from '../asset_checker.js';

function create_if_block_1(ctx) {
	let embed;
	let embed_src_value;

	return {
		c() {
			embed = element("embed");
			this.h();
		},
		l(nodes) {
			embed = claim_element(nodes, "EMBED", { src: true, class: true });
			this.h();
		},
		h() {
			if (embed.src !== (embed_src_value = /*field*/ ctx[0])) attr(embed, "src", embed_src_value);
			attr(embed, "class", "thumbnail svelte-1vxxnpb");
		},
		m(target, anchor) {
			insert(target, embed, anchor);
		},
		p(ctx, dirty) {
			if (dirty & /*field*/ 1 && embed.src !== (embed_src_value = /*field*/ ctx[0])) {
				attr(embed, "src", embed_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(embed);
		}
	};
}

// (38:4) {#if isImagePath(field)}
function create_if_block(ctx) {
	let img;
	let img_src_value;
	let mounted;
	let dispose;

	return {
		c() {
			img = element("img");
			this.h();
		},
		l(nodes) {
			img = claim_element(nodes, "IMG", { src: true, alt: true, class: true });
			this.h();
		},
		h() {
			if (img.src !== (img_src_value = /*field*/ ctx[0])) attr(img, "src", img_src_value);
			attr(img, "alt", "click to change thumbnail");
			attr(img, "class", "thumbnail svelte-1vxxnpb");
		},
		m(target, anchor) {
			insert(target, img, anchor);

			if (!mounted) {
				dispose = listen(img, "error", /*error_handler*/ ctx[7]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*field*/ 1 && img.src !== (img_src_value = /*field*/ ctx[0])) {
				attr(img, "src", img_src_value);
			}
		},
		d(detaching) {
			if (detaching) detach(img);
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div;
	let show_if;
	let show_if_1;
	let t0;
	let button;
	let t1;
	let mounted;
	let dispose;

	function select_block_type(ctx, dirty) {
		if (show_if == null || dirty & /*field*/ 1) show_if = !!isImagePath(/*field*/ ctx[0]);
		if (show_if) return create_if_block;
		if (show_if_1 == null || dirty & /*field*/ 1) show_if_1 = !!isDocPath(/*field*/ ctx[0]);
		if (show_if_1) return create_if_block_1;
	}

	let current_block_type = select_block_type(ctx, -1);
	let if_block = current_block_type && current_block_type(ctx);

	return {
		c() {
			div = element("div");
			if (if_block) if_block.c();
			t0 = space();
			button = element("button");
			t1 = text("Change Asset");
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			if (if_block) if_block.l(div_nodes);
			t0 = claim_space(div_nodes);
			button = claim_element(div_nodes, "BUTTON", { class: true });
			var button_nodes = children(button);
			t1 = claim_text(button_nodes, "Change Asset");
			button_nodes.forEach(detach);
			div_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(button, "class", "swap svelte-1vxxnpb");
			attr(div, "class", "thumbnail-wrapper svelte-1vxxnpb");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if (if_block) if_block.m(div, null);
			append(div, t0);
			append(div, button);
			append(button, t1);

			if (!mounted) {
				dispose = listen(button, "click", prevent_default(/*swapAsset*/ ctx[1]));
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (current_block_type === (current_block_type = select_block_type(ctx, dirty)) && if_block) {
				if_block.p(ctx, dirty);
			} else {
				if (if_block) if_block.d(1);
				if_block = current_block_type && current_block_type(ctx);

				if (if_block) {
					if_block.c();
					if_block.m(div, t0);
				}
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div);

			if (if_block) {
				if_block.d();
			}

			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { field } = $$props,
		{ showMedia } = $$props,
		{ changingAsset } = $$props,
		{ localMediaList } = $$props;

	let originalAsset;

	const swapAsset = () => {
		$$invalidate(6, originalAsset = field);
		$$invalidate(3, changingAsset = field);
		$$invalidate(4, showMedia = true);
	};

	// If an img path is 404, load the data image instead
	const loadDataImage = imgEl => {
		// Get src from img that was clicked on in visual editor
		let src = imgEl.target.attributes.src.nodeValue;

		// Load all image on the page with that source
		// TODO: Could load images not related to this field specifically
		let allImg = document.querySelectorAll("img[src=\"" + src + "\"]");

		allImg.forEach(i => {
			localMediaList.forEach(asset => {
				// Check if the field path matches a recently uploaded file in memory
				if (asset.file === field) {
					// Set the source to the data image instead of the path that can't be found
					i.src = asset.contents;
				}
			});
		});
	};

	const error_handler = imgEl => loadDataImage(imgEl);

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
		if ("showMedia" in $$props) $$invalidate(4, showMedia = $$props.showMedia);
		if ("changingAsset" in $$props) $$invalidate(3, changingAsset = $$props.changingAsset);
		if ("localMediaList" in $$props) $$invalidate(5, localMediaList = $$props.localMediaList);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*changingAsset, field, originalAsset*/ 73) {
			$: if (changingAsset) {
				if (field === originalAsset) {
					$$invalidate(0, field = changingAsset);
				}
			}
		}
	};

	return [
		field,
		swapAsset,
		loadDataImage,
		changingAsset,
		showMedia,
		localMediaList,
		originalAsset,
		error_handler
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			field: 0,
			showMedia: 4,
			changingAsset: 3,
			localMediaList: 5
		});
	}
}

export default Component;