/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_component,
	claim_element,
	claim_space,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	listen,
	mount_component,
	run_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from '../../web_modules/svelte/internal/index.mjs';

import ButtonWrapper from './button_wrapper.js';
import Button from './button.js';

function create_default_slot(ctx) {
	let button0;
	let t;
	let button1;
	let current;

	button0 = new Button({
			props: {
				commitList: [
					{
						file: /*content*/ ctx[0].filepath,
						contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
					}
				],
				buttonText: "Save",
				action: /*content*/ ctx[0].isNew ? "create" : "update",
				encoding: "text"
			}
		});

	button1 = new Button({
			props: {
				commitList: [
					{
						file: /*content*/ ctx[0].filepath,
						contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
					}
				],
				buttonText: "Delete",
				buttonStyle: "secondary",
				action: "delete",
				encoding: "text"
			}
		});

	return {
		c() {
			create_component(button0.$$.fragment);
			t = space();
			create_component(button1.$$.fragment);
		},
		l(nodes) {
			claim_component(button0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(button1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(button0, target, anchor);
			insert(target, t, anchor);
			mount_component(button1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*content*/ 1) button0_changes.commitList = [
				{
					file: /*content*/ ctx[0].filepath,
					contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
				}
			];

			if (dirty & /*content*/ 1) button0_changes.action = /*content*/ ctx[0].isNew ? "create" : "update";
			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*content*/ 1) button1_changes.commitList = [
				{
					file: /*content*/ ctx[0].filepath,
					contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
				}
			];

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button0, detaching);
			if (detaching) detach(t);
			destroy_component(button1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let form;
	let div;
	let t;
	let buttonwrapper;
	let current;
	let mounted;
	let dispose;

	buttonwrapper = new ButtonWrapper({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			form = element("form");
			div = element("div");
			t = space();
			create_component(buttonwrapper.$$.fragment);
			this.h();
		},
		l(nodes) {
			form = claim_element(nodes, "FORM", { class: true });
			var form_nodes = children(form);
			div = claim_element(form_nodes, "DIV", { class: true, contenteditable: true });
			var div_nodes = children(div);
			div_nodes.forEach(detach);
			t = claim_space(form_nodes);
			claim_component(buttonwrapper.$$.fragment, form_nodes);
			form_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(div, "class", "json-editor svelte-nwrl91");
			attr(div, "contenteditable", "true");
			attr(form, "class", "svelte-nwrl91");
		},
		m(target, anchor) {
			insert(target, form, anchor);
			append(form, div);
			div.innerHTML = /*formattedFields*/ ctx[1];
			append(form, t);
			mount_component(buttonwrapper, form, null);
			current = true;

			if (!mounted) {
				dispose = [
					listen(div, "input", /*input_handler*/ ctx[3]),
					listen(div, "keydown", /*keydown_handler*/ ctx[4])
				];

				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*formattedFields*/ 2) div.innerHTML = /*formattedFields*/ ctx[1];;
			const buttonwrapper_changes = {};

			if (dirty & /*$$scope, content*/ 65) {
				buttonwrapper_changes.$$scope = { dirty, ctx };
			}

			buttonwrapper.$set(buttonwrapper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(buttonwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buttonwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(form);
			destroy_component(buttonwrapper);
			mounted = false;
			run_all(dispose);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { content } = $$props;
	let formattedFields, previousFilepath;

	const syntaxHighlight = json => {
		json = JSON.stringify(json, null, 4);
		json = json.replace(/&/g, "&amp;").replace(/</g, "&lt;").replace(/>/g, "&gt;");

		return json.replace(/("(\u[a-zA-Z0-9]{4}|\[^u]|[^\"])*"(s*:)?|(true|false|null)|(-?[0-9]*.?[0-9]*))/g, match => {
			let cls = "syntax";

			if ((/^"/).test(match)) {
				if ((/:$/).test(match)) {
					cls = "key";
				} else {
					cls = "string";
				}
			} else if ((/true|false/).test(match)) {
				cls = "boolean";
			} else if ((/[0-9]/).test(match)) {
				cls = "number";
			} else if ((/null/).test(match)) {
				cls = "null";
			}

			return "<span class=\"" + cls + "\">" + match + "</span>";
		});
	};

	const input_handler = e => $$invalidate(0, content.fields = JSON.parse(e.target.textContent), content);

	const keydown_handler = e => {
		if (e.key === "Tab") {
			document.execCommand("insertHTML", false, "&#32;&#32;&#32;&#32;");
			e.preventDefault();
		}
	};

	$$self.$$set = $$props => {
		if ("content" in $$props) $$invalidate(0, content = $$props.content);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*content, previousFilepath*/ 5) {
			$: if (content.filepath !== previousFilepath) {
				$$invalidate(1, formattedFields = syntaxHighlight(content.fields));
				$$invalidate(2, previousFilepath = content.filepath);
			}
		}
	};

	return [content, formattedFields, previousFilepath, input_handler, keydown_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { content: 0 });
	}
}

export default Component;