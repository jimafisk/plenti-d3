/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	children,
	claim_component,
	claim_element,
	claim_space,
	create_component,
	destroy_component,
	detach,
	element,
	init,
	insert,
	mount_component,
	query_selector_all,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from '../../web_modules/svelte/internal/index.mjs';

import { onMount } from '../../web_modules/svelte/index.mjs';
import ButtonWrapper from './button_wrapper.js';
import Button from './button.js';

function create_default_slot(ctx) {
	let button0;
	let t;
	let button1;
	let current;

	button0 = new Button({
			props: {
				commitList: [
					{
						file: /*content*/ ctx[0].filepath,
						contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
					}
				],
				buttonText: "Save",
				action: /*content*/ ctx[0].isNew ? "create" : "update",
				encoding: "text"
			}
		});

	button1 = new Button({
			props: {
				commitList: [
					{
						file: /*content*/ ctx[0].filepath,
						contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
					}
				],
				buttonText: "Delete",
				action: "delete",
				encoding: "text"
			}
		});

	return {
		c() {
			create_component(button0.$$.fragment);
			t = space();
			create_component(button1.$$.fragment);
		},
		l(nodes) {
			claim_component(button0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(button1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(button0, target, anchor);
			insert(target, t, anchor);
			mount_component(button1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button0_changes = {};

			if (dirty & /*content*/ 1) button0_changes.commitList = [
				{
					file: /*content*/ ctx[0].filepath,
					contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
				}
			];

			if (dirty & /*content*/ 1) button0_changes.action = /*content*/ ctx[0].isNew ? "create" : "update";
			button0.$set(button0_changes);
			const button1_changes = {};

			if (dirty & /*content*/ 1) button1_changes.commitList = [
				{
					file: /*content*/ ctx[0].filepath,
					contents: JSON.stringify(/*content*/ ctx[0].fields, undefined, "\t")
				}
			];

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button0, detaching);
			if (detaching) detach(t);
			destroy_component(button1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let link;
	let t0;
	let form;
	let div;
	let t1;
	let buttonwrapper;
	let current;

	buttonwrapper = new ButtonWrapper({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			link = element("link");
			t0 = space();
			form = element("form");
			div = element("div");
			t1 = space();
			create_component(buttonwrapper.$$.fragment);
			this.h();
		},
		l(nodes) {
			const head_nodes = query_selector_all("[data-svelte=\"svelte-1xta96n\"]", document.head);
			link = claim_element(head_nodes, "LINK", { rel: true, href: true });
			head_nodes.forEach(detach);
			t0 = claim_space(nodes);
			form = claim_element(nodes, "FORM", { class: true });
			var form_nodes = children(form);
			div = claim_element(form_nodes, "DIV", { class: true });
			children(div).forEach(detach);
			t1 = claim_space(form_nodes);
			claim_component(buttonwrapper.$$.fragment, form_nodes);
			form_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(link, "rel", "stylesheet");
			attr(link, "href", "https://unpkg.com/codemirror@5.65.1/lib/codemirror.css");
			attr(div, "class", "editor-container svelte-1kxexd2");
			attr(form, "class", "svelte-1kxexd2");
		},
		m(target, anchor) {
			append(document.head, link);
			insert(target, t0, anchor);
			insert(target, form, anchor);
			append(form, div);
			/*div_binding*/ ctx[3](div);
			append(form, t1);
			mount_component(buttonwrapper, form, null);
			current = true;
		},
		p(ctx, [dirty]) {
			const buttonwrapper_changes = {};

			if (dirty & /*$$scope, content*/ 33) {
				buttonwrapper_changes.$$scope = { dirty, ctx };
			}

			buttonwrapper.$set(buttonwrapper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(buttonwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buttonwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			detach(link);
			if (detaching) detach(t0);
			if (detaching) detach(form);
			/*div_binding*/ ctx[3](null);
			destroy_component(buttonwrapper);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { content } = $$props;
	const loaded = Promise.resolve().then(() => import("https://unpkg.com/codemirror@5.65.1/lib/codemirror.js")).then(() => import("https://unpkg.com/codemirror@5.65.1/mode/javascript/javascript.js"));
	let container;
	let editor;

	onMount(async () => {
		await loaded;
		$$invalidate(2, editor = new CodeMirror(container, { mode: "javascript" }));

		editor.on("change", () => {
			try {
				$$invalidate(0, content.fields = JSON.parse(editor.getValue()), content);
			} catch(error) {
				if (!(error instanceof SyntaxError)) {
					throw error;
				}
			}
		});
	});

	function div_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			container = $$value;
			$$invalidate(1, container);
		});
	}

	$$self.$$set = $$props => {
		if ("content" in $$props) $$invalidate(0, content = $$props.content);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*editor, content*/ 5) {
			$: if (editor && !editor.hasFocus()) {
				editor.setValue(JSON.stringify(content.fields, undefined, 4));
			}
		}
	};

	return [content, container, editor, div_binding];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { content: 0 });
	}
}

export default Component;