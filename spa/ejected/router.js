/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	check_outros,
	claim_component,
	component_subscribe,
	create_component,
	destroy_component,
	detach,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from '../web_modules/svelte/internal/index.mjs';

import Navaid from '../web_modules/navaid/dist/navaid.mjs';
import allContent from './content.js';
import * as allLayouts from './layouts.js';
import { env } from './env.js';
import adminMenu from './cms/admin_menu.js';
import { user } from './cms/auth.js';
import allDefaults from './defaults.js';

function create_fragment(ctx) {
	let switch_instance;
	let switch_instance_anchor;
	let current;
	var switch_value = allLayouts["layouts_" + env.entrypoint.replace("/", "_").replace(".", "_")];

	function switch_props(ctx) {
		return {
			props: {
				path: /*path*/ ctx[0],
				params: /*params*/ ctx[1],
				content: /*content*/ ctx[2],
				layout: /*layout*/ ctx[3],
				allContent,
				allLayouts,
				env,
				user,
				adminMenu,
				shadowContent: /*shadowContent*/ ctx[4]
			}
		};
	}

	if (switch_value) {
		switch_instance = new switch_value(switch_props(ctx));
	}

	return {
		c() {
			if (switch_instance) create_component(switch_instance.$$.fragment);
			switch_instance_anchor = empty();
		},
		l(nodes) {
			if (switch_instance) claim_component(switch_instance.$$.fragment, nodes);
			switch_instance_anchor = empty();
		},
		m(target, anchor) {
			if (switch_instance) {
				mount_component(switch_instance, target, anchor);
			}

			insert(target, switch_instance_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const switch_instance_changes = {};
			if (dirty & /*path*/ 1) switch_instance_changes.path = /*path*/ ctx[0];
			if (dirty & /*params*/ 2) switch_instance_changes.params = /*params*/ ctx[1];
			if (dirty & /*content*/ 4) switch_instance_changes.content = /*content*/ ctx[2];
			if (dirty & /*layout*/ 8) switch_instance_changes.layout = /*layout*/ ctx[3];

			if (switch_value !== (switch_value = allLayouts["layouts_" + env.entrypoint.replace("/", "_").replace(".", "_")])) {
				if (switch_instance) {
					group_outros();
					const old_component = switch_instance;

					transition_out(old_component.$$.fragment, 1, 0, () => {
						destroy_component(old_component, 1);
					});

					check_outros();
				}

				if (switch_value) {
					switch_instance = new switch_value(switch_props(ctx));
					create_component(switch_instance.$$.fragment);
					transition_in(switch_instance.$$.fragment, 1);
					mount_component(switch_instance, switch_instance_anchor.parentNode, switch_instance_anchor);
				} else {
					switch_instance = null;
				}
			} else if (switch_value) {
				switch_instance.$set(switch_instance_changes);
			}
		},
		i(local) {
			if (current) return;
			if (switch_instance) transition_in(switch_instance.$$.fragment, local);
			current = true;
		},
		o(local) {
			if (switch_instance) transition_out(switch_instance.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(switch_instance_anchor);
			if (switch_instance) destroy_component(switch_instance, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let $user;
	component_subscribe($$self, user, $$value => $$invalidate(5, $user = $$value));
	let path = location.pathname;
	let params = new URLSearchParams(location.search);

	// Load data-content-filepath attribute from HTML
	let content = allContent.find(c => c.filepath === document.documentElement.dataset.contentFilepath);

	let layout;
	let shadowContent = {};

	if ($user.isBeingAuthenticated) {
		$user.finishAuthentication(params);
	}

	function draw(m, c) {
		$$invalidate(2, content = c);

		if (content === undefined) {
			// Check if there is a 404 data source.
			$$invalidate(2, content = allContent.find(c => c.filepath === "content/404.json"));

			if (content === undefined) {
				// If no 404.json data source exists, pass placeholder values.
				$$invalidate(2, content = {
					"path": "/404",
					"type": "404",
					"filename": "404.json",
					"fields": {}
				});
			}
		}

		$$invalidate(3, layout = m.default);
		window.scrollTo(0, 0);
	}

	function track(obj) {
		$$invalidate(0, path = obj.state || obj.uri || location.pathname);
		$$invalidate(1, params = new URLSearchParams(location.search));
	}

	addEventListener("replacestate", track);
	addEventListener("pushstate", track);
	addEventListener("popstate", track);

	const handle404 = () => {
		import("../content/404.js").then(draw).catch(err => {
			console.log("Add a '/layouts/content/404.svelte' file to handle Page Not Found errors.");
			console.log("If you want to pass data to your 404 component, you can also add a '/content/404.json' file.");
			console.log(err);
		});
	};

	/**
 * @return {boolean} true if hash location found and navigated, false otherwise.
 */
	const navigateHashLocation = () => {
		if (location.pathname != "/") {
			return false;
		}

		if (location.hash.startsWith("#add/") && $user.isAuthenticated) {
			const [type, filename] = location.hash.substring(("#add/").length).split("/");
			const defaultContent = allDefaults.find(defaultContent => defaultContent.type == type);

			if (type && filename && defaultContent) {
				import("../content/" + type + ".js").then(m => {
					$$invalidate(2, content = structuredClone(defaultContent));
					$$invalidate(2, content.isNew = true, content);
					$$invalidate(2, content.filename = filename + ".json", content);
					$$invalidate(2, content.filepath = content.filepath.replace("_defaults.json", filename + ".json"), content);
					$$invalidate(3, layout = m.default);
				}).catch(handle404);

				return true;
			} else {
				// Page type not found or filename not specified.
				handle404();

				return true;
			}
		}

		return false;
	};

	const router = Navaid("/", handle404);

	allContent.forEach(content => {
		router.on(env.baseurl + content.path, () => {
			// Override with hash location if one is found.
			if (navigateHashLocation()) {
				return;
			}

			import("../content/" + content.type + ".js").then(m => draw(m, content)).catch(handle404);
		});
	});

	router.listen();
	return [path, params, content, layout, shadowContent];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, {});
	}
}

export default Component;