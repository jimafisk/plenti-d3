/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_flush_callback,
	append,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	children,
	claim_component,
	claim_element,
	claim_space,
	create_component,
	destroy_component,
	detach,
	element,
	empty,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	space,
	transition_in,
	transition_out
} from '../../web_modules/svelte/internal/index.mjs';

import MediaFilters from './media_filters.js';
import MediaGrid from './media_grid.js';
import ButtonWrapper from './button_wrapper.js';
import Button from './button.js';

function create_if_block(ctx) {
	let buttonwrapper;
	let current;

	buttonwrapper = new ButtonWrapper({
			props: {
				$$slots: { default: [create_default_slot] },
				$$scope: { ctx }
			}
		});

	return {
		c() {
			create_component(buttonwrapper.$$.fragment);
		},
		l(nodes) {
			claim_component(buttonwrapper.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(buttonwrapper, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const buttonwrapper_changes = {};

			if (dirty & /*$$scope, mediaList*/ 524416) {
				buttonwrapper_changes.$$scope = { dirty, ctx };
			}

			buttonwrapper.$set(buttonwrapper_changes);
		},
		i(local) {
			if (current) return;
			transition_in(buttonwrapper.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(buttonwrapper.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(buttonwrapper, detaching);
		}
	};
}

// (40:4) <ButtonWrapper>
function create_default_slot(ctx) {
	let button0;
	let t;
	let button1;
	let updating_commitList;
	let current;

	button0 = new Button({
			props: { buttonText: "Download selected" }
		});

	button0.$on("click", /*downloadFiles*/ ctx[8]);

	function button1_commitList_binding(value) {
		/*button1_commitList_binding*/ ctx[18](value);
	}

	let button1_props = {
		afterSubmit: /*removeMedia*/ ctx[9],
		buttonText: "Delete Selected Media",
		buttonStyle: "secondary",
		action: "delete",
		encoding: "text"
	};

	if (/*mediaList*/ ctx[7] !== void 0) {
		button1_props.commitList = /*mediaList*/ ctx[7];
	}

	button1 = new Button({ props: button1_props });
	binding_callbacks.push(() => bind(button1, "commitList", button1_commitList_binding));

	return {
		c() {
			create_component(button0.$$.fragment);
			t = space();
			create_component(button1.$$.fragment);
		},
		l(nodes) {
			claim_component(button0.$$.fragment, nodes);
			t = claim_space(nodes);
			claim_component(button1.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(button0, target, anchor);
			insert(target, t, anchor);
			mount_component(button1, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const button1_changes = {};

			if (!updating_commitList && dirty & /*mediaList*/ 128) {
				updating_commitList = true;
				button1_changes.commitList = /*mediaList*/ ctx[7];
				add_flush_callback(() => updating_commitList = false);
			}

			button1.$set(button1_changes);
		},
		i(local) {
			if (current) return;
			transition_in(button0.$$.fragment, local);
			transition_in(button1.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(button0.$$.fragment, local);
			transition_out(button1.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(button0, detaching);
			if (detaching) detach(t);
			destroy_component(button1, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let mediafilters;
	let updating_media;
	let updating_filters;
	let updating_enabledFilters;
	let updating_filteredMedia;
	let updating_changingMedia;
	let t0;
	let mediagrid;
	let updating_selectedMedia;
	let updating_changingMedia_1;
	let updating_showMediaModal;
	let t1;
	let if_block_anchor;
	let current;

	function mediafilters_media_binding(value) {
		/*mediafilters_media_binding*/ ctx[10](value);
	}

	function mediafilters_filters_binding(value) {
		/*mediafilters_filters_binding*/ ctx[11](value);
	}

	function mediafilters_enabledFilters_binding(value) {
		/*mediafilters_enabledFilters_binding*/ ctx[12](value);
	}

	function mediafilters_filteredMedia_binding(value) {
		/*mediafilters_filteredMedia_binding*/ ctx[13](value);
	}

	function mediafilters_changingMedia_binding(value) {
		/*mediafilters_changingMedia_binding*/ ctx[14](value);
	}

	let mediafilters_props = {};

	if (/*media*/ ctx[0] !== void 0) {
		mediafilters_props.media = /*media*/ ctx[0];
	}

	if (/*filters*/ ctx[4] !== void 0) {
		mediafilters_props.filters = /*filters*/ ctx[4];
	}

	if (/*enabledFilters*/ ctx[5] !== void 0) {
		mediafilters_props.enabledFilters = /*enabledFilters*/ ctx[5];
	}

	if (/*filteredMedia*/ ctx[6] !== void 0) {
		mediafilters_props.filteredMedia = /*filteredMedia*/ ctx[6];
	}

	if (/*changingMedia*/ ctx[1] !== void 0) {
		mediafilters_props.changingMedia = /*changingMedia*/ ctx[1];
	}

	mediafilters = new MediaFilters({ props: mediafilters_props });
	binding_callbacks.push(() => bind(mediafilters, "media", mediafilters_media_binding));
	binding_callbacks.push(() => bind(mediafilters, "filters", mediafilters_filters_binding));
	binding_callbacks.push(() => bind(mediafilters, "enabledFilters", mediafilters_enabledFilters_binding));
	binding_callbacks.push(() => bind(mediafilters, "filteredMedia", mediafilters_filteredMedia_binding));
	binding_callbacks.push(() => bind(mediafilters, "changingMedia", mediafilters_changingMedia_binding));

	function mediagrid_selectedMedia_binding(value) {
		/*mediagrid_selectedMedia_binding*/ ctx[15](value);
	}

	function mediagrid_changingMedia_binding(value) {
		/*mediagrid_changingMedia_binding*/ ctx[16](value);
	}

	function mediagrid_showMediaModal_binding(value) {
		/*mediagrid_showMediaModal_binding*/ ctx[17](value);
	}

	let mediagrid_props = { files: /*filteredMedia*/ ctx[6] };

	if (/*selectedMedia*/ ctx[3] !== void 0) {
		mediagrid_props.selectedMedia = /*selectedMedia*/ ctx[3];
	}

	if (/*changingMedia*/ ctx[1] !== void 0) {
		mediagrid_props.changingMedia = /*changingMedia*/ ctx[1];
	}

	if (/*showMediaModal*/ ctx[2] !== void 0) {
		mediagrid_props.showMediaModal = /*showMediaModal*/ ctx[2];
	}

	mediagrid = new MediaGrid({ props: mediagrid_props });
	binding_callbacks.push(() => bind(mediagrid, "selectedMedia", mediagrid_selectedMedia_binding));
	binding_callbacks.push(() => bind(mediagrid, "changingMedia", mediagrid_changingMedia_binding));
	binding_callbacks.push(() => bind(mediagrid, "showMediaModal", mediagrid_showMediaModal_binding));
	let if_block = /*selectedMedia*/ ctx[3].length > 0 && create_if_block(ctx);

	return {
		c() {
			div = element("div");
			create_component(mediafilters.$$.fragment);
			t0 = space();
			create_component(mediagrid.$$.fragment);
			t1 = space();
			if (if_block) if_block.c();
			if_block_anchor = empty();
			this.h();
		},
		l(nodes) {
			div = claim_element(nodes, "DIV", { class: true });
			var div_nodes = children(div);
			claim_component(mediafilters.$$.fragment, div_nodes);
			t0 = claim_space(div_nodes);
			claim_component(mediagrid.$$.fragment, div_nodes);
			div_nodes.forEach(detach);
			t1 = claim_space(nodes);
			if (if_block) if_block.l(nodes);
			if_block_anchor = empty();
			this.h();
		},
		h() {
			attr(div, "class", "media-wrapper svelte-1tdkqce");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			mount_component(mediafilters, div, null);
			append(div, t0);
			mount_component(mediagrid, div, null);
			insert(target, t1, anchor);
			if (if_block) if_block.m(target, anchor);
			insert(target, if_block_anchor, anchor);
			current = true;
		},
		p(ctx, [dirty]) {
			const mediafilters_changes = {};

			if (!updating_media && dirty & /*media*/ 1) {
				updating_media = true;
				mediafilters_changes.media = /*media*/ ctx[0];
				add_flush_callback(() => updating_media = false);
			}

			if (!updating_filters && dirty & /*filters*/ 16) {
				updating_filters = true;
				mediafilters_changes.filters = /*filters*/ ctx[4];
				add_flush_callback(() => updating_filters = false);
			}

			if (!updating_enabledFilters && dirty & /*enabledFilters*/ 32) {
				updating_enabledFilters = true;
				mediafilters_changes.enabledFilters = /*enabledFilters*/ ctx[5];
				add_flush_callback(() => updating_enabledFilters = false);
			}

			if (!updating_filteredMedia && dirty & /*filteredMedia*/ 64) {
				updating_filteredMedia = true;
				mediafilters_changes.filteredMedia = /*filteredMedia*/ ctx[6];
				add_flush_callback(() => updating_filteredMedia = false);
			}

			if (!updating_changingMedia && dirty & /*changingMedia*/ 2) {
				updating_changingMedia = true;
				mediafilters_changes.changingMedia = /*changingMedia*/ ctx[1];
				add_flush_callback(() => updating_changingMedia = false);
			}

			mediafilters.$set(mediafilters_changes);
			const mediagrid_changes = {};
			if (dirty & /*filteredMedia*/ 64) mediagrid_changes.files = /*filteredMedia*/ ctx[6];

			if (!updating_selectedMedia && dirty & /*selectedMedia*/ 8) {
				updating_selectedMedia = true;
				mediagrid_changes.selectedMedia = /*selectedMedia*/ ctx[3];
				add_flush_callback(() => updating_selectedMedia = false);
			}

			if (!updating_changingMedia_1 && dirty & /*changingMedia*/ 2) {
				updating_changingMedia_1 = true;
				mediagrid_changes.changingMedia = /*changingMedia*/ ctx[1];
				add_flush_callback(() => updating_changingMedia_1 = false);
			}

			if (!updating_showMediaModal && dirty & /*showMediaModal*/ 4) {
				updating_showMediaModal = true;
				mediagrid_changes.showMediaModal = /*showMediaModal*/ ctx[2];
				add_flush_callback(() => updating_showMediaModal = false);
			}

			mediagrid.$set(mediagrid_changes);

			if (/*selectedMedia*/ ctx[3].length > 0) {
				if (if_block) {
					if_block.p(ctx, dirty);

					if (dirty & /*selectedMedia*/ 8) {
						transition_in(if_block, 1);
					}
				} else {
					if_block = create_if_block(ctx);
					if_block.c();
					transition_in(if_block, 1);
					if_block.m(if_block_anchor.parentNode, if_block_anchor);
				}
			} else if (if_block) {
				group_outros();

				transition_out(if_block, 1, 1, () => {
					if_block = null;
				});

				check_outros();
			}
		},
		i(local) {
			if (current) return;
			transition_in(mediafilters.$$.fragment, local);
			transition_in(mediagrid.$$.fragment, local);
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(mediafilters.$$.fragment, local);
			transition_out(mediagrid.$$.fragment, local);
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_component(mediafilters);
			destroy_component(mediagrid);
			if (detaching) detach(t1);
			if (if_block) if_block.d(detaching);
			if (detaching) detach(if_block_anchor);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let filteredMedia;
	let mediaList;
	let { media } = $$props, { changingMedia } = $$props, { showMediaModal } = $$props;
	let filters = [];
	let enabledFilters = [];
	let selectedMedia = [];

	const downloadFiles = () => {
		selectedMedia.forEach(mediaFile => {
			const a = document.createElement("a");
			a.setAttribute("href", mediaFile);
			a.setAttribute("download", mediaFile.substring(mediaFile.lastIndexOf("/") + 1));
			a.click();
		});
	};

	const removeMedia = () => {
		selectedMedia.forEach(m => {
			$$invalidate(0, media = media.filter(i => i != m));
		});

		$$invalidate(3, selectedMedia = []);
	};

	function mediafilters_media_binding(value) {
		media = value;
		$$invalidate(0, media);
	}

	function mediafilters_filters_binding(value) {
		filters = value;
		$$invalidate(4, filters);
	}

	function mediafilters_enabledFilters_binding(value) {
		enabledFilters = value;
		$$invalidate(5, enabledFilters);
	}

	function mediafilters_filteredMedia_binding(value) {
		filteredMedia = value;
		$$invalidate(6, filteredMedia);
	}

	function mediafilters_changingMedia_binding(value) {
		changingMedia = value;
		$$invalidate(1, changingMedia);
	}

	function mediagrid_selectedMedia_binding(value) {
		selectedMedia = value;
		$$invalidate(3, selectedMedia);
	}

	function mediagrid_changingMedia_binding(value) {
		changingMedia = value;
		$$invalidate(1, changingMedia);
	}

	function mediagrid_showMediaModal_binding(value) {
		showMediaModal = value;
		$$invalidate(2, showMediaModal);
	}

	function button1_commitList_binding(value) {
		mediaList = value;
		($$invalidate(7, mediaList), $$invalidate(3, selectedMedia));
	}

	$$self.$$set = $$props => {
		if ("media" in $$props) $$invalidate(0, media = $$props.media);
		if ("changingMedia" in $$props) $$invalidate(1, changingMedia = $$props.changingMedia);
		if ("showMediaModal" in $$props) $$invalidate(2, showMediaModal = $$props.showMediaModal);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*selectedMedia*/ 8) {
			// Create objects that can be used by GitLab API
			$: $$invalidate(7, mediaList = selectedMedia.map(i => {
				return { file: i, contents: null };
			}));
		}
	};

	$: $$invalidate(6, filteredMedia = []);

	return [
		media,
		changingMedia,
		showMediaModal,
		selectedMedia,
		filters,
		enabledFilters,
		filteredMedia,
		mediaList,
		downloadFiles,
		removeMedia,
		mediafilters_media_binding,
		mediafilters_filters_binding,
		mediafilters_enabledFilters_binding,
		mediafilters_filteredMedia_binding,
		mediafilters_changingMedia_binding,
		mediagrid_selectedMedia_binding,
		mediagrid_changingMedia_binding,
		mediagrid_showMediaModal_binding,
		button1_commitList_binding
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			media: 0,
			changingMedia: 1,
			showMediaModal: 2
		});
	}
}

export default Component;