/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	children,
	claim_element,
	claim_text,
	destroy_each,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	select_option,
	select_value,
	set_data,
	text
} from '../../../web_modules/svelte/internal/index.mjs';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[4] = list[i];
	return child_ctx;
}

// (6:4) {#each schema[parentKeys].options as option}
function create_each_block(ctx) {
	let option;
	let t_value = /*option*/ ctx[4] + "";
	let t;
	let option_value_value;

	return {
		c() {
			option = element("option");
			t = text(t_value);
			this.h();
		},
		l(nodes) {
			option = claim_element(nodes, "OPTION", {});
			var option_nodes = children(option);
			t = claim_text(option_nodes, t_value);
			option_nodes.forEach(detach);
			this.h();
		},
		h() {
			option.__value = option_value_value = /*option*/ ctx[4];
			option.value = option.__value;
		},
		m(target, anchor) {
			insert(target, option, anchor);
			append(option, t);
		},
		p(ctx, dirty) {
			if (dirty & /*schema, parentKeys*/ 6 && t_value !== (t_value = /*option*/ ctx[4] + "")) set_data(t, t_value);

			if (dirty & /*schema, parentKeys*/ 6 && option_value_value !== (option_value_value = /*option*/ ctx[4])) {
				option.__value = option_value_value;
				option.value = option.__value;
			}
		},
		d(detaching) {
			if (detaching) detach(option);
		}
	};
}

function create_fragment(ctx) {
	let select;
	let mounted;
	let dispose;
	let each_value = /*schema*/ ctx[1][/*parentKeys*/ ctx[2]].options;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	return {
		c() {
			select = element("select");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			select = claim_element(nodes, "SELECT", {});
			var select_nodes = children(select);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(select_nodes);
			}

			select_nodes.forEach(detach);
			this.h();
		},
		h() {
			if (/*field*/ ctx[0] === void 0) add_render_callback(() => /*select_change_handler*/ ctx[3].call(select));
		},
		m(target, anchor) {
			insert(target, select, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(select, null);
			}

			select_option(select, /*field*/ ctx[0]);

			if (!mounted) {
				dispose = listen(select, "change", /*select_change_handler*/ ctx[3]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*schema, parentKeys*/ 6) {
				each_value = /*schema*/ ctx[1][/*parentKeys*/ ctx[2]].options;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						each_blocks[i].m(select, null);
					}
				}

				for (; i < each_blocks.length; i += 1) {
					each_blocks[i].d(1);
				}

				each_blocks.length = each_value.length;
			}

			if (dirty & /*field, schema, parentKeys*/ 7) {
				select_option(select, /*field*/ ctx[0]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(select);
			destroy_each(each_blocks, detaching);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { schema } = $$props, { parentKeys } = $$props, { field } = $$props;

	function select_change_handler() {
		field = select_value(this);
		$$invalidate(0, field);
		$$invalidate(1, schema);
		$$invalidate(2, parentKeys);
	}

	$$self.$$set = $$props => {
		if ("schema" in $$props) $$invalidate(1, schema = $$props.schema);
		if ("parentKeys" in $$props) $$invalidate(2, parentKeys = $$props.parentKeys);
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
	};

	return [field, schema, parentKeys, select_change_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { schema: 1, parentKeys: 2, field: 0 });
	}
}

export default Component;