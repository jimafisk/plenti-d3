/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	attr,
	claim_element,
	detach,
	element,
	init,
	insert,
	noop,
	safe_not_equal
} from '../../../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let input;

	return {
		c() {
			input = element("input");
			this.h();
		},
		l(nodes) {
			input = claim_element(nodes, "INPUT", { class: true });
			this.h();
		},
		h() {
			input.value = /*field*/ ctx[0];
			input.disabled = true;
			attr(input, "class", "svelte-1sa32ec");
		},
		m(target, anchor) {
			insert(target, input, anchor);
		},
		p(ctx, [dirty]) {
			if (dirty & /*field*/ 1 && input.value !== /*field*/ ctx[0]) {
				input.value = /*field*/ ctx[0];
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(input);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { field } = $$props;

	const uuidv4 = () => {
		return ([10000000] + -1000 + -4000 + -8000 + -100000000000).replace(/[018]/g, c => (c ^ crypto.getRandomValues(new Uint8Array(1))[0] & 15 >> c / 4).toString(16));
	};

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
	};

	$$self.$$.update = () => {
		if ($$self.$$.dirty & /*field*/ 1) {
			$: if (field === "") {
				$$invalidate(0, field = uuidv4());
			}
		}
	};

	return [field];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0 });
	}
}

export default Component;