/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	add_flush_callback,
	attr,
	bind,
	binding_callbacks,
	check_outros,
	children,
	claim_component,
	claim_element,
	create_component,
	destroy_component,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	mount_component,
	safe_not_equal,
	transition_in,
	transition_out
} from '../../../web_modules/svelte/internal/index.mjs';

import DynamicFormInput from '../dynamic_form_input.js';

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[10] = list[i][0];
	child_ctx[11] = list[i][1];
	child_ctx[12] = list;
	child_ctx[13] = i;
	return child_ctx;
}

// (7:4) {#each Object.entries(field) as [key, value]}
function create_each_block(ctx) {
	let dynamicforminput;
	let updating_field;
	let updating_showMediaModal;
	let updating_changingMedia;
	let updating_localMediaList;
	let current;

	function dynamicforminput_field_binding(value) {
		/*dynamicforminput_field_binding*/ ctx[6](value, /*key*/ ctx[10]);
	}

	function dynamicforminput_showMediaModal_binding(value) {
		/*dynamicforminput_showMediaModal_binding*/ ctx[7](value);
	}

	function dynamicforminput_changingMedia_binding(value) {
		/*dynamicforminput_changingMedia_binding*/ ctx[8](value);
	}

	function dynamicforminput_localMediaList_binding(value) {
		/*dynamicforminput_localMediaList_binding*/ ctx[9](value);
	}

	let dynamicforminput_props = {
		label: /*key*/ ctx[10],
		parentKeys: /*parentKeys*/ ctx[4] === ""
		? /*key*/ ctx[10]
		: /*parentKeys*/ ctx[4] + "." + /*key*/ ctx[10],
		schema: /*schema*/ ctx[5]
	};

	if (/*field*/ ctx[0][/*key*/ ctx[10]] !== void 0) {
		dynamicforminput_props.field = /*field*/ ctx[0][/*key*/ ctx[10]];
	}

	if (/*showMediaModal*/ ctx[1] !== void 0) {
		dynamicforminput_props.showMediaModal = /*showMediaModal*/ ctx[1];
	}

	if (/*changingMedia*/ ctx[2] !== void 0) {
		dynamicforminput_props.changingMedia = /*changingMedia*/ ctx[2];
	}

	if (/*localMediaList*/ ctx[3] !== void 0) {
		dynamicforminput_props.localMediaList = /*localMediaList*/ ctx[3];
	}

	dynamicforminput = new DynamicFormInput({ props: dynamicforminput_props });
	binding_callbacks.push(() => bind(dynamicforminput, "field", dynamicforminput_field_binding));
	binding_callbacks.push(() => bind(dynamicforminput, "showMediaModal", dynamicforminput_showMediaModal_binding));
	binding_callbacks.push(() => bind(dynamicforminput, "changingMedia", dynamicforminput_changingMedia_binding));
	binding_callbacks.push(() => bind(dynamicforminput, "localMediaList", dynamicforminput_localMediaList_binding));

	return {
		c() {
			create_component(dynamicforminput.$$.fragment);
		},
		l(nodes) {
			claim_component(dynamicforminput.$$.fragment, nodes);
		},
		m(target, anchor) {
			mount_component(dynamicforminput, target, anchor);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			const dynamicforminput_changes = {};
			if (dirty & /*field*/ 1) dynamicforminput_changes.label = /*key*/ ctx[10];

			if (dirty & /*parentKeys, field*/ 17) dynamicforminput_changes.parentKeys = /*parentKeys*/ ctx[4] === ""
			? /*key*/ ctx[10]
			: /*parentKeys*/ ctx[4] + "." + /*key*/ ctx[10];

			if (dirty & /*schema*/ 32) dynamicforminput_changes.schema = /*schema*/ ctx[5];

			if (!updating_field && dirty & /*field, Object*/ 1) {
				updating_field = true;
				dynamicforminput_changes.field = /*field*/ ctx[0][/*key*/ ctx[10]];
				add_flush_callback(() => updating_field = false);
			}

			if (!updating_showMediaModal && dirty & /*showMediaModal*/ 2) {
				updating_showMediaModal = true;
				dynamicforminput_changes.showMediaModal = /*showMediaModal*/ ctx[1];
				add_flush_callback(() => updating_showMediaModal = false);
			}

			if (!updating_changingMedia && dirty & /*changingMedia*/ 4) {
				updating_changingMedia = true;
				dynamicforminput_changes.changingMedia = /*changingMedia*/ ctx[2];
				add_flush_callback(() => updating_changingMedia = false);
			}

			if (!updating_localMediaList && dirty & /*localMediaList*/ 8) {
				updating_localMediaList = true;
				dynamicforminput_changes.localMediaList = /*localMediaList*/ ctx[3];
				add_flush_callback(() => updating_localMediaList = false);
			}

			dynamicforminput.$set(dynamicforminput_changes);
		},
		i(local) {
			if (current) return;
			transition_in(dynamicforminput.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(dynamicforminput.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(dynamicforminput, detaching);
		}
	};
}

function create_fragment(ctx) {
	let fieldset;
	let current;
	let each_value = Object.entries(/*field*/ ctx[0]);
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			fieldset = element("fieldset");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			this.h();
		},
		l(nodes) {
			fieldset = claim_element(nodes, "FIELDSET", { class: true });
			var fieldset_nodes = children(fieldset);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].l(fieldset_nodes);
			}

			fieldset_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(fieldset, "class", "svelte-720sq3");
		},
		m(target, anchor) {
			insert(target, fieldset, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(fieldset, null);
			}

			current = true;
		},
		p(ctx, [dirty]) {
			if (dirty & /*Object, field, parentKeys, schema, showMediaModal, changingMedia, localMediaList*/ 63) {
				each_value = Object.entries(/*field*/ ctx[0]);
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(fieldset, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(fieldset);
			destroy_each(each_blocks, detaching);
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { field } = $$props,
		{ showMediaModal } = $$props,
		{ changingMedia } = $$props,
		{ localMediaList } = $$props,
		{ parentKeys } = $$props,
		{ schema } = $$props;

	function dynamicforminput_field_binding(value, key) {
		if ($$self.$$.not_equal(field[key], value)) {
			field[key] = value;
			$$invalidate(0, field);
		}
	}

	function dynamicforminput_showMediaModal_binding(value) {
		showMediaModal = value;
		$$invalidate(1, showMediaModal);
	}

	function dynamicforminput_changingMedia_binding(value) {
		changingMedia = value;
		$$invalidate(2, changingMedia);
	}

	function dynamicforminput_localMediaList_binding(value) {
		localMediaList = value;
		$$invalidate(3, localMediaList);
	}

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
		if ("showMediaModal" in $$props) $$invalidate(1, showMediaModal = $$props.showMediaModal);
		if ("changingMedia" in $$props) $$invalidate(2, changingMedia = $$props.changingMedia);
		if ("localMediaList" in $$props) $$invalidate(3, localMediaList = $$props.localMediaList);
		if ("parentKeys" in $$props) $$invalidate(4, parentKeys = $$props.parentKeys);
		if ("schema" in $$props) $$invalidate(5, schema = $$props.schema);
	};

	return [
		field,
		showMediaModal,
		changingMedia,
		localMediaList,
		parentKeys,
		schema,
		dynamicforminput_field_binding,
		dynamicforminput_showMediaModal_binding,
		dynamicforminput_changingMedia_binding,
		dynamicforminput_localMediaList_binding
	];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			field: 0,
			showMediaModal: 1,
			changingMedia: 2,
			localMediaList: 3,
			parentKeys: 4,
			schema: 5
		});
	}
}

export default Component;