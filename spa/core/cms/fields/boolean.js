/* generated by Svelte v3.38.3 */
import {
	SvelteComponent,
	append,
	attr,
	children,
	claim_element,
	claim_space,
	claim_text,
	detach,
	element,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text
} from '../../../web_modules/svelte/internal/index.mjs';

function create_fragment(ctx) {
	let label_1;
	let input;
	let t0;
	let t1;
	let mounted;
	let dispose;

	return {
		c() {
			label_1 = element("label");
			input = element("input");
			t0 = space();
			t1 = text(/*field*/ ctx[0]);
			this.h();
		},
		l(nodes) {
			label_1 = claim_element(nodes, "LABEL", {});
			var label_1_nodes = children(label_1);
			input = claim_element(label_1_nodes, "INPUT", { id: true, type: true });
			t0 = claim_space(label_1_nodes);
			t1 = claim_text(label_1_nodes, /*field*/ ctx[0]);
			label_1_nodes.forEach(detach);
			this.h();
		},
		h() {
			attr(input, "id", /*label*/ ctx[1]);
			attr(input, "type", "checkbox");
		},
		m(target, anchor) {
			insert(target, label_1, anchor);
			append(label_1, input);
			input.checked = /*field*/ ctx[0];
			append(label_1, t0);
			append(label_1, t1);

			if (!mounted) {
				dispose = listen(input, "change", /*input_change_handler*/ ctx[2]);
				mounted = true;
			}
		},
		p(ctx, [dirty]) {
			if (dirty & /*label*/ 2) {
				attr(input, "id", /*label*/ ctx[1]);
			}

			if (dirty & /*field*/ 1) {
				input.checked = /*field*/ ctx[0];
			}

			if (dirty & /*field*/ 1) set_data(t1, /*field*/ ctx[0]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(label_1);
			mounted = false;
			dispose();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { field } = $$props, { label } = $$props;

	function input_change_handler() {
		field = this.checked;
		$$invalidate(0, field);
	}

	$$self.$$set = $$props => {
		if ("field" in $$props) $$invalidate(0, field = $$props.field);
		if ("label" in $$props) $$invalidate(1, label = $$props.label);
	};

	return [field, label, input_change_handler];
}

class Component extends SvelteComponent {
	constructor(options) {
		super();
		init(this, options, instance, create_fragment, safe_not_equal, { field: 0, label: 1 });
	}
}

export default Component;